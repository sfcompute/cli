/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v0/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The balance of the account. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_AccountBalance"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The authenticated account */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_Account"];
                    };
                };
                /** @description Account not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_AccountNotFoundError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    include_system?: boolean;
                    origin_client?: "cli" | "web" | "manual";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List tokens */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_ListTokenResponse"];
                    };
                };
                /** @description Account not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_AccountNotFoundError"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Number of seconds until token expires.
                         * @example 604800
                         */
                        expires_in_seconds: number;
                        /** @description Name of the token. */
                        name?: string;
                        /** @description Description of the token. */
                        description?: string;
                        /** @enum {string} */
                        origin_client: "cli";
                    };
                };
            };
            responses: {
                /** @description Token created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_Token"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_MaxTokenLimitReached"];
                    };
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_AccountNotFoundError"];
                    };
                };
                /** @description Account is frozen */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_AccountFrozenError"];
                    };
                };
                /** @description Token not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_AccountNotFoundError"] | components["schemas"]["San_Francisco_Compute_Documentation_InvalidTokenCreateOriginClient"];
                    };
                };
                /** @description Token generation rate limit exceeded */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_MaxTokenLimitReached"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Token deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Token or account not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_AccountNotFoundError"] | components["schemas"]["San_Francisco_Compute_Documentation_TokenNotFound"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    starting_after?: string;
                    ending_before?: string;
                    limit?: string;
                    transaction_type?: ("buy" | "sell" | "transfer" | "error" | "instant_deposit" | "deposit_ach" | "withdrawal_bank" | "refund" | "admin_ledger_transfer" | "fulfillment_escrow_release" | "promotional_credit" | "delivery_fees_collected") | ("buy" | "sell" | "transfer" | "error" | "instant_deposit" | "deposit_ach" | "withdrawal_bank" | "refund" | "admin_ledger_transfer" | "fulfillment_escrow_release" | "promotional_credit" | "delivery_fees_collected")[];
                    account_kind?: components["schemas"]["San_Francisco_Compute_Documentation_AccountKind"] | components["schemas"]["San_Francisco_Compute_Documentation_AccountKind"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of transactions for the account */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["San_Francisco_Compute_Documentation_AccountTransactions"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SF_Compute_K8s_Orchestration_API_frontend_server.ListResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Credential details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SF_Compute_K8s_Orchestration_API_types.KubernetesCredentialBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SF_Compute_K8s_Orchestration_API_frontend_server.BaseCredentialResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/credentials/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credential ID (format: cred_<nanoid>) */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SF_Compute_K8s_Orchestration_API_frontend_server.DeleteResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/vms/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_vms_instances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/vms/logs2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_vms_logs2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/vms/replace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["post_vms_replace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/vms/script": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_vms_user_data"];
        put?: never;
        post: operations["post_vms_user_data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/vms/ssh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_vms_ssh"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/zones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List zones
         * @description List all available zones
         */
        get: operations["list_zones_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/zones/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get zone by ID
         * @description Get detailed information about a specific zone
         */
        get: operations["get_zone_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/_healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Health check endpoint
         */
        get: operations["health_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List nodes
         * @description List all VM nodes for the authenticated account
         */
        get: operations["list_nodes_handler"];
        put?: never;
        /**
         * Create nodes
         * @description Create VM nodes
         */
        post: operations["create_nodes_handler"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/nodes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Node
         * @description Retrieve details of a specific node by its ID or name
         */
        get: operations["get_node_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/nodes/{id}/extend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Extend node reservation
         * @description Purchase additional time to extend the end time of a reserved VM node
         */
        patch: operations["extend_node_handler"];
        trace?: never;
    };
    "/v1/nodes/{id}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Release node
         * @description Release an auto reserved VM node from its procurement, reducing the procurement's desired quantity by 1
         */
        patch: operations["release_node_handler"];
        trace?: never;
    };
    "/v0/clusters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Kubernetes clusters
         * @description List all Kubernetes clusters
         */
        get: operations["listClusters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List contracts
         * @description List contracts
         */
        get: operations["listContracts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/contracts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get contract
         * @description Get a contract
         */
        get: operations["getContract"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Orders
         * @description List active and historical orders
         */
        get: operations["listOrders"];
        put?: never;
        /** Create a new order */
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get order details */
        get: operations["getOrder"];
        put?: never;
        post?: never;
        /** Cancel an order */
        delete: operations["cancelOrder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orders/{id}/clusters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get order clusters
         * @description Get clusters associated with this order. This can currently canonly be one, but might in the future be multiple.
         */
        get: operations["getOrderClusters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/procurements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List procurements
         * @description List all procurements
         */
        get: operations["listProcurements"];
        put?: never;
        /**
         * Create procurement
         * @description Create a procurement. A procurement tries to continuously buy small blocks of compute over and over again. Advantage being that you might be able to get a cheaper price than a longer term reservation. Disadvantage being that you can never be sure if you're nodes will spin up and down as market prices fluctuate.
         */
        post: operations["createProcurement"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/procurements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get procurement
         * @description Get procurements state and details
         */
        get: operations["getProcurement"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update procurement
         * @description Update an existing procurement.
         */
        patch: operations["updateProcurement"];
        trace?: never;
    };
    "/v0/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get refunds
         * @description Get status of refunds
         */
        get: operations["getRefunds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current account information
         * @description Retrieves detailed information about the currently authenticated account.
         *
         *     This endpoint returns:
         *     - Account ID
         *     - Account status and permissions (role, KYC level, frozen status)
         *     - Account metadata (creation date, waitlist status)
         *
         *     Use this endpoint to:
         *     - Display user profile information
         *     - Check account permissions and limits
         *     - Verify KYC status before performing restricted operations
         *     - Determine feature availability based on account role
         */
        get: operations["getAccountMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/balances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current account balance
         * @description Retrieves the current account balance.
         */
        get: operations["getBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current credit balance
         * @description Retrieves the current credit balance for the authenticated user's account.
         *
         *     This endpoint returns:
         *     - The current balance in cents
         *     - The available prepaid credits in cents
         *     - The amount due for the next billing period in cents
         *
         */
        get: operations["getCredits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/credits/migrate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Migrate account to new billing system
         * @description Migrates your account from the legacy billing system to the new credit-based billing system.
         *
         *     This endpoint supports two migration options:
         *     - **Withdraw**: Transfer your account balance to an external bank account
         *     - **Convert to Credits**: Convert your existing balance to credits for use in the new system
         *
         *     The migration process will:
         *     - Check your current account balance
         *     - Verify that your account is eligible for automatic migration
         *     - Process the migration according to your chosen option
         *
         *     **Note**: Some accounts with complex balance states may require manual migration assistance. In such cases, the response will indicate `requires_manual_migration` and our support team will help you complete the process.
         */
        post: operations["migrateAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get transactions
         * @description Lists transaction history. Provide either `starting_after` or `ending_before` (not both) for cursor-based pagination.
         */
        get: operations["getTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/inference/batches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_batches"];
        put?: never;
        /** Create a batch job. */
        post: operations["create_batches"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/inference/batches/{batch_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_batch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/inference/batches/{batch_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["cancel_batch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/inference/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["health_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/inference/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_models"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/inference/models/{model_id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_model_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/quote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["handle_quote"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        San_Francisco_Compute_Documentation_AccountBalance: {
            /**
             * @example balance
             * @enum {string}
             */
            object: "balance";
            available: {
                /**
                 * @description Funds available to spend or withdraw.
                 * @example 1000000
                 */
                amount: number;
                /**
                 * @example usd
                 * @enum {string}
                 */
                currency: "usd";
            };
            reserved: {
                /**
                 * @description Funds held in reserve for pending withdrawals & open buy orders.
                 * @example 1000000
                 */
                amount: number;
                /**
                 * @example usd
                 * @enum {string}
                 */
                currency: "usd";
            };
        };
        San_Francisco_Compute_Documentation_Account: {
            /**
             * @example account
             * @enum {string}
             */
            object: "account";
            /** @example acc_123 */
            id: string;
            /**
             * @example user
             * @enum {string}
             */
            role: "admin" | "user" | "vendor" | "clops" | "sfcd";
            /** @example true */
            can_buy: boolean;
            /** @example false */
            can_sell: boolean;
        };
        San_Francisco_Compute_Documentation_AccountNotFoundError: {
            /**
             * @example error
             * @enum {string}
             */
            object: "error";
            /**
             * @example account.not_found
             * @enum {string}
             */
            code: "account.not_found";
            /** @example Account not found */
            message?: string;
            /** @example {} */
            details?: {
                [key: string]: unknown;
            };
        };
        San_Francisco_Compute_Documentation_Token: {
            /**
             * @description The type of object
             * @enum {string}
             */
            object: "token";
            id: string;
            /**
             * @description Only available after creation
             * @example <jwt>
             */
            token?: string;
            /** @description Name of the token. */
            name: string | null;
            /** @description Description of the token. */
            description: string | null;
            is_sandbox: boolean;
            /** @description ISO 8601 date string of when token expires (in UTC). */
            last_active_at: string | null;
            /** @description ISO 8601 date string of when token expires (in UTC). */
            expires_at: string;
            /** @description ISO 8601 date string of when token was created (in UTC). */
            created_at: string;
            /** @enum {string|null} */
            origin_client: "cli" | "web" | "manual" | null;
            /** @description Whether the token was generated by the system & is being used in the background, or whether a user explicitly created it for their own use. */
            is_system: boolean;
        };
        San_Francisco_Compute_Documentation_ListTokenResponse: {
            data: components["schemas"]["San_Francisco_Compute_Documentation_Token"][];
            /**
             * @example true
             * @example false
             */
            has_more: boolean;
            /**
             * @example list
             * @enum {string}
             */
            object: "list";
        };
        San_Francisco_Compute_Documentation_MaxTokenLimitReached: {
            /**
             * @example error
             * @enum {string}
             */
            object: "error";
            /**
             * @example token.max_token_limit_reached
             * @enum {string}
             */
            code: "token.max_token_limit_reached";
            /** @example Max token limit reached */
            message?: string;
            /** @example {} */
            details?: {
                [key: string]: unknown;
            };
        };
        San_Francisco_Compute_Documentation_AccountFrozenError: {
            /**
             * @example error
             * @enum {string}
             */
            object: "error";
            /**
             * @example account.frozen
             * @enum {string}
             */
            code: "account.frozen";
            /** @example Account is frozen */
            message?: string;
            /** @example {} */
            details?: {
                [key: string]: unknown;
            };
        };
        San_Francisco_Compute_Documentation_InvalidTokenCreateOriginClient: {
            /**
             * @example error
             * @enum {string}
             */
            object: "error";
            /**
             * @example token.invalid_token_create_origin_client
             * @enum {string}
             */
            code: "token.invalid_token_create_origin_client";
            /** @example Invalid token create origin client */
            message?: string;
            /** @example {} */
            details?: {
                [key: string]: unknown;
            };
        };
        San_Francisco_Compute_Documentation_TokenNotFound: {
            /**
             * @example error
             * @enum {string}
             */
            object: "error";
            /**
             * @example token.not_found
             * @enum {string}
             */
            code: "token.not_found";
            /** @example Token not found */
            message?: string;
            /** @example {} */
            details?: {
                [key: string]: unknown;
            };
        };
        /**
         * @description Whether the transaction is incoming to or outgoing from the account.
         * @example incoming
         * @example outgoing
         * @enum {string}
         */
        San_Francisco_Compute_Documentation_TransactionDirection: "incoming" | "outgoing";
        /**
         * @description The current status of a transaction.
         * @example accepted
         * @example rejected
         * @enum {string}
         */
        San_Francisco_Compute_Documentation_TransactionStatus: "accepted" | "rejected";
        /**
         * @description The kind of account involved in the transaction. Each user has one account of each account kind. The account "primary" is the main one used for buy/sell on the platform.
         * @example primary
         * @example withdrawal_reserve
         * @enum {string}
         */
        San_Francisco_Compute_Documentation_AccountKind: "primary" | "capital" | "withdrawal_reserve" | "fulfillment_escrow" | "delivery_fee_escrow";
        /**
         * @description A transaction representing a movement of funds
         * @example {
         *       "id": "tx_1234567890-4",
         *       "timestamp": "2024-03-15T00:30:00.000Z",
         *       "direction": "outgoing",
         *       "status": "accepted",
         *       "amount": 5000,
         *       "account_kind": "primary",
         *       "balance_before": 70000,
         *       "balance_after": 65000,
         *       "metadata": {
         *         "type": "buy",
         *         "start_time": "2024-11-05T07:24:24.207Z",
         *         "end_time": "2024-11-05T09:24:24.207Z",
         *         "quantity": 2,
         *         "order_id": "ordr_34905N",
         *         "instance_type_requirements": {
         *           "accelerator_types": [
         *             "H100"
         *           ],
         *           "interconnect_types": [
         *             "Infiniband"
         *           ],
         *           "regions": [
         *             "NorthAmerica"
         *           ],
         *           "delivery_type": "K8s"
         *         }
         *       }
         *     }
         */
        San_Francisco_Compute_Documentation_Transaction: {
            /** @description Unique identifier for the transaction */
            id: string;
            /**
             * Format: date-time
             * @description When the money movement occurred within SFCs system
             */
            timestamp: string;
            direction: components["schemas"]["San_Francisco_Compute_Documentation_TransactionDirection"];
            status: components["schemas"]["San_Francisco_Compute_Documentation_TransactionStatus"];
            /** @description Transaction amount in cents */
            amount: number;
            account_kind: components["schemas"]["San_Francisco_Compute_Documentation_AccountKind"];
            /** @description Account balance before transaction in cents */
            balance_before: number;
            /** @description Account balance after transaction in cents */
            balance_after: number;
            /** @description Additional transaction-specific details */
            metadata: {
                /** @enum {string} */
                type: "buy";
                /** @description Requirements specified for the buy order */
                instance_type_requirements: {
                    /** @description List of allowed accelerator types. */
                    accelerator_types?: ("H100" | "H200")[];
                    /** @description List of allowed interconnect types. */
                    interconnect_types?: ("Infiniband" | "None")[];
                    /** @description List of allowed regions. */
                    regions?: ("NorthAmerica" | "AsiaPacific" | "EuropeMiddleEastAfrica")[];
                    /**
                     * @description Delivery method.
                     * @enum {string}
                     */
                    delivery_type: "K8s" | "VM";
                };
                /** @description Quantity requested in the buy order, in number of nodes (8 gpus) */
                quantity: number;
                /**
                 * Format: date-time
                 * @description The buy orders requested start time of the compute
                 */
                start_time: string;
                /**
                 * Format: date-time
                 * @description The buy orders requested end time of compute
                 */
                end_time: string;
                /** @description An external ID with prefix and alphanumeric string with underscores */
                order_id: string;
            } | {
                /** @enum {string} */
                type: "sell";
                /** @description Quantity that was requested to sell, In number of nodes (8 gpus) */
                quantity: number;
                /**
                 * Format: date-time
                 * @description The orders requested start time of the compute to sell
                 */
                start_time: string;
                /**
                 * Format: date-time
                 * @description The orders requested end time of compute to sell
                 */
                end_time: string;
                /** @description The sell order that was executed. */
                order_id: string;
                /** @description The backing contract that was sold from. */
                backing_contract_id: string;
            } | {
                /** @enum {string} */
                type: "transfer";
            } | {
                /** @enum {string} */
                type: "error";
                /** @description Best effort type of the transaction without additional metadata, but may be 'unknown' */
                inner_type: string;
                /** @description message of what went wrong */
                message?: unknown;
            } | {
                /** @enum {string} */
                type: "instant_deposit";
                /**
                 * Format: date-time
                 * @description The time the bank involved marked marked this transaction as completed.
                 */
                completed_at: string;
                /**
                 * @description The last 4 digits of the card that was used to perform the payment.
                 * @example 7302
                 * @example 1038
                 */
                card_last4: string;
                /**
                 * @description Brand of card used for payment.
                 * @example visa
                 * @example mastercard
                 */
                card_brand: string;
                /**
                 * @description The funding type of the card.
                 * @example credit
                 * @example debit
                 */
                card_funding: string;
                /**
                 * Format: uri
                 * @description URL for the receipt if available.
                 * @example https://dashboard.stripe.com/receipts/payment/...
                 */
                receipt_url?: string;
            } | {
                /** @enum {string} */
                type: "deposit_ach";
                /**
                 * Format: date-time
                 * @description The date the bank withdrawal was initiated.
                 */
                date_initiated: string;
                /**
                 * Format: date-time
                 * @description The date the bank withdrawal was cancelled, if it was cancelled.
                 */
                date_cancelled: string | null;
                /**
                 * Format: date-time
                 * @description The date the bank withdrawal settled by the bank, if it was cancelled. This will in most cases be close to the time SFC processed the transaction.
                 */
                date_settled: string | null;
                /**
                 * @description A short description of the account.
                 * @example TOTAL CHECKING (checking)
                 */
                account_description: string;
                /**
                 * @description The last 4 digits of the bank account number.
                 * @example 4902
                 * @example 2038
                 */
                bank_account_last4: string;
            } | {
                /** @enum {string} */
                type: "withdrawal_bank";
                /**
                 * Format: date-time
                 * @description The date this bank withdrawal was approved.
                 */
                approved_at: string;
                /**
                 * @description A short description of the account.
                 * @example TOTAL CHECKING (checking)
                 */
                account_description: string;
                /**
                 * @description The last 4 digits of the bank account number.
                 * @example 4902
                 * @example 2038
                 */
                bank_account_last4: string;
            } | {
                /** @enum {string} */
                type: "refund";
                /**
                 * Format: date-time
                 * @description Start time of experienced downtime.
                 */
                start_time: string;
                /**
                 * Format: date-time
                 * @description End time of experienced downtime.
                 */
                end_time: string;
                /** @description In number of nodes (8 gpus) affected during this period. */
                quantity: number;
                /** @description The index rate per GPU, in cents, used to calculate the refund amount. */
                refund_cents_per_gpu_hour: number;
                /** @description Downtime report ID that resulted in this refund being issued. */
                report_id: string;
                /**
                 * Format: date-time
                 * @description The time at which SFC approved the refund.
                 */
                issue_date: string;
            } | {
                /** @enum {string} */
                type: "admin_ledger_transfer";
            } | {
                /** @enum {string} */
                type: "fulfillment_escrow_release";
            } | {
                /** @enum {string} */
                type: "promotional_credit";
            } | {
                /** @enum {string} */
                type: "delivery_fees_collected";
            };
        };
        /**
         * @description List of transactions for an account
         * @example {
         *       "object": "transactions",
         *       "transactions": [
         *         {
         *           "id": "tx_1234567890-4",
         *           "timestamp": "2024-03-15T00:30:00.000Z",
         *           "direction": "outgoing",
         *           "status": "accepted",
         *           "amount": 5000,
         *           "account_kind": "primary",
         *           "balance_before": 70000,
         *           "balance_after": 65000,
         *           "metadata": {
         *             "type": "buy",
         *             "start_time": "2024-11-05T07:24:24.207Z",
         *             "end_time": "2024-11-05T09:24:24.207Z",
         *             "quantity": 2,
         *             "order_id": "ordr_34Az95N",
         *             "instance_type_requirements": {
         *               "accelerator_types": [
         *                 "H100"
         *               ],
         *               "interconnect_types": [
         *                 "Infiniband"
         *               ],
         *               "regions": [
         *                 "NorthAmerica"
         *               ],
         *               "delivery_type": "K8s"
         *             }
         *           }
         *         }
         *       ],
         *       "pagination": {
         *         "has_more": true,
         *         "count": 1,
         *         "oldest_timestamp": "2024-03-15T00:30:00.000Z",
         *         "newest_timestamp": "2024-03-15T00:30:00.000Z"
         *       }
         *     }
         */
        San_Francisco_Compute_Documentation_AccountTransactions: {
            /**
             * @description The type of the response object
             * @example transactions
             * @enum {string}
             */
            object: "transactions";
            /** @description Transactions for all accounts (see account kind) associated with this user. */
            transactions: components["schemas"]["San_Francisco_Compute_Documentation_Transaction"][];
            /** @description Pagination information */
            pagination: {
                /**
                 * @description Whether there are more transactions available
                 * @example true
                 */
                has_more: boolean;
                /**
                 * @description Number of transactions returned
                 * @example 20
                 */
                count: number;
                /**
                 * Format: date-time
                 * @description Timestamp of the oldest transaction returned, useful for pagination
                 * @example 2024-03-15T00:30:00.000Z
                 */
                oldest_timestamp: string | null;
                /**
                 * Format: date-time
                 * @description Timestamp of the newest transaction returned, useful for pagination
                 * @example 2024-03-15T00:30:00.000Z
                 */
                newest_timestamp: string | null;
            };
        };
        "SF_Compute_K8s_Orchestration_API_frontend_server.BaseCredentialResponse": {
            cluster?: components["schemas"]["SF_Compute_K8s_Orchestration_API_frontend_server.ClusterInfo"];
            id?: string;
            label?: string;
            object?: string;
            pubkey?: string;
            username?: string;
        };
        "SF_Compute_K8s_Orchestration_API_frontend_server.ClusterInfo": {
            id?: string;
            kubernetes_api_url?: string;
            kubernetes_ca_cert?: string;
            kubernetes_namespace?: string;
            name?: string;
            object?: string;
        };
        "SF_Compute_K8s_Orchestration_API_frontend_server.CredentialResponse": {
            cluster?: components["schemas"]["SF_Compute_K8s_Orchestration_API_frontend_server.ClusterInfo"];
            cluster_type?: string;
            encrypted_kubeconfig?: string;
            encrypted_token?: string;
            ephemeral_pubkey?: string;
            id?: string;
            label?: string;
            nonce?: string;
            object?: string;
            pubkey?: string;
            username?: string;
        };
        "SF_Compute_K8s_Orchestration_API_frontend_server.DeleteResponse": {
            deleted?: boolean;
            id?: string;
            object?: string;
        };
        "SF_Compute_K8s_Orchestration_API_frontend_server.ListResponse": {
            data?: components["schemas"]["SF_Compute_K8s_Orchestration_API_frontend_server.CredentialResponse"][];
            has_more?: boolean;
            object?: string;
        };
        /** @description Credential request body */
        "SF_Compute_K8s_Orchestration_API_types.KubernetesCredentialBody": {
            cluster?: string;
            label?: string;
            object?: string;
            pubkey?: string;
            username?: string;
        };
        vmorch_GetInstancesResponse: {
            data: components["schemas"]["vmorch_VmInstance"][];
        };
        vmorch_GetSshResponse: {
            ssh_host_keys?: components["schemas"]["vmorch_SshHostKeyInfo"][] | null;
            ssh_hostname: string;
            /** Format: u-int16 */
            ssh_port: number;
        };
        vmorch_GetUserDataResponse: {
            script: components["schemas"]["vmorch_UserData"];
        };
        vmorch_PostReplaceRequest: {
            vm_id: string;
        };
        vmorch_PostReplaceResponse: {
            replaced: string;
            replaced_by: string;
        };
        vmorch_PostUserDataRequest: {
            script: components["schemas"]["vmorch_UserData"];
        };
        vmorch_PostUserDataResponse: {
            script: components["schemas"]["vmorch_UserData"];
        };
        vmorch_SshHostKeyInfo: {
            base64_encoded_key: string;
            key_type: string;
        };
        /** @description if the script is valid utf8 then the response may be in either string, or byte form and the client must handle both */
        vmorch_UserData: string | number[];
        vmorch_VmInstance: {
            cluster_id: string;
            current_status: string;
            id: string;
            instance_group_id: string;
            last_updated_at: string;
        };
        vmorch_VmsLogChunk: {
            data: number[];
            instance_id: string;
            /** Format: u-int32 */
            monotonic_timestamp_nano_sec: number;
            /** Format: u-int64 */
            monotonic_timestamp_sec: number;
            /** @description In RFC 3339 format */
            realtime_timestamp: string;
            /** Format: u-int64 */
            seqnum: number;
        };
        vmorch_VmsLogsResponse: {
            data: components["schemas"]["vmorch_VmsLogChunk"][];
        };
        /** @enum {string} */
        "node-api_AcceleratorType": "H100" | "H200";
        "node-api_AvailabilityRectangle": {
            end_timestamp: components["schemas"]["node-api_UnixEpoch"];
            /**
             * Format: u-int64
             * @description The number of nodes available during this time period
             */
            quantity: number;
            start_timestamp: components["schemas"]["node-api_UnixEpoch"];
        };
        "node-api_CreateNodesRequest": {
            /**
             * Format: u-int32
             * @example 1
             */
            desired_count: number;
            /**
             * Format: int64
             * @description End time as Unix timestamp in seconds.
             *     If provided, end time must be aligned to the hour.
             *     If not provided, the node will be created as an autoreserved node.
             */
            end_at?: number | null;
            /**
             * Format: int64
             * @description Max price per hour for a node in cents
             * @example 1000
             */
            max_price_per_node_hour: number;
            /**
             * @description Custom node names.
             *     Names cannot follow the vm_{alpha_numeric_chars} as this is reserved for system-generated IDs.
             *     Names cannot be numeric strings.
             * @example [
             *       "cuda-crunch"
             *     ]
             */
            names?: string[];
            /** @default autoreserved */
            node_type: null | components["schemas"]["node-api_NodeType"];
            /**
             * Format: int64
             * @description Start time as Unix timestamp in seconds
             * @example 1640995200
             */
            start_at?: number;
            /**
             * @description Zone to create the nodes in
             * @example hayesvalley
             */
            zone: string;
        };
        /** @enum {string} */
        "node-api_DeliveryType": "K8s" | "VM";
        "node-api_ErrorContent": {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            type: components["schemas"]["node-api_ErrorType"];
        };
        "node-api_ErrorDetail": {
            /** @description Specific error code for this detail */
            code: string;
            /** @description The field that caused the error (for validation errors) */
            field?: string | null;
            /** @description Detailed error message */
            message: string;
        };
        "node-api_ErrorKind": {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "api_error";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "invalid_request_error";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "authentication_error";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "idempotency_error";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "conflict";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "not_found";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "request_timed_out";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "forbidden";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "not_implemented";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "upgrade_required";
        } | {
            details?: components["schemas"]["node-api_ErrorDetail"][];
            message: string;
            /** @enum {string} */
            type: "payment_required";
        };
        "node-api_ErrorObject": {
            error: components["schemas"]["node-api_ErrorContent"];
        };
        /** @enum {string} */
        "node-api_ErrorType": "api_error" | "invalid_request_error" | "authentication_error" | "idempotency_error" | "conflict" | "not_found" | "request_timed_out" | "forbidden" | "not_implemented" | "upgrade_required" | "payment_required" | "service_unavailable";
        "node-api_ExtendNodeRequest": {
            /**
             * Format: int64
             * @description Duration in seconds to extend the node
             *     Must be at least 1 hour (3600 seconds) and a multiple of 1 hour.
             * @example 7200
             */
            duration_seconds: number;
            /**
             * Format: int64
             * @description Max price per hour for the extension in cents
             * @example 1000
             */
            max_price_per_node_hour: number;
        };
        /** @enum {string} */
        "node-api_InterconnectType": "Infiniband" | "None";
        "node-api_ListResponse_Node": {
            data: {
                /**
                 * Format: int64
                 * @description Creation time as Unix timestamp in seconds
                 * @example 1640995200
                 */
                created_at?: number | null;
                /**
                 * Format: int64
                 * @description Deletion time as Unix timestamp in seconds
                 * @example 1640995200
                 */
                deleted_at?: number | null;
                /**
                 * Format: int64
                 * @description End time as Unix timestamp in seconds
                 * @example 1640995200
                 */
                end_at?: number | null;
                gpu_type: components["schemas"]["node-api_AcceleratorType"];
                /** @example n_b1dc52505c6db142 */
                id: string;
                /**
                 * Format: int64
                 * @description Max price per hour you're willing to pay for a node in cents
                 * @example 1000
                 */
                max_price_per_node_hour?: number | null;
                /** @example cuda-crunch */
                name: string;
                node_type: components["schemas"]["node-api_NodeType"];
                /** @example node */
                object: string;
                /** @example sfcompute */
                owner: string;
                /** @example proc_b1dc52505c6de142 */
                procurement_id?: string | null;
                /**
                 * Format: int64
                 * @description Start time as Unix timestamp in seconds
                 * @example 1640995200
                 */
                start_at?: number | null;
                status: components["schemas"]["node-api_Status"];
                /**
                 * Format: int64
                 * @description Last updated time as Unix timestamp in seconds
                 * @example 1640995200
                 */
                updated_at?: number | null;
                vms?: null | components["schemas"]["node-api_VmList"];
                /** @example hayesvalley */
                zone?: string | null;
            }[];
            /** @example list */
            object: string;
        };
        "node-api_ListResponse_ZoneInfo": {
            data: {
                /** @description The available capacity on this cluster, in the
                 *     shape of consecutive "availability rectangles". */
                available_capacity: components["schemas"]["node-api_AvailabilityRectangle"][];
                delivery_type: components["schemas"]["node-api_DeliveryType"];
                hardware_type: components["schemas"]["node-api_AcceleratorType"];
                interconnect_type: components["schemas"]["node-api_InterconnectType"];
                name: string;
                object: string;
                region: components["schemas"]["node-api_Region"];
            }[];
            /** @example list */
            object: string;
        };
        "node-api_Node": {
            /**
             * Format: int64
             * @description Creation time as Unix timestamp in seconds
             * @example 1640995200
             */
            created_at?: number | null;
            /**
             * Format: int64
             * @description Deletion time as Unix timestamp in seconds
             * @example 1640995200
             */
            deleted_at?: number | null;
            /**
             * Format: int64
             * @description End time as Unix timestamp in seconds
             * @example 1640995200
             */
            end_at?: number | null;
            gpu_type: components["schemas"]["node-api_AcceleratorType"];
            /** @example n_b1dc52505c6db142 */
            id: string;
            /**
             * Format: int64
             * @description Max price per hour you're willing to pay for a node in cents
             * @example 1000
             */
            max_price_per_node_hour?: number | null;
            /** @example cuda-crunch */
            name: string;
            node_type: components["schemas"]["node-api_NodeType"];
            /** @example node */
            object: string;
            /** @example sfcompute */
            owner: string;
            /** @example proc_b1dc52505c6de142 */
            procurement_id?: string | null;
            /**
             * Format: int64
             * @description Start time as Unix timestamp in seconds
             * @example 1640995200
             */
            start_at?: number | null;
            status: components["schemas"]["node-api_Status"];
            /**
             * Format: int64
             * @description Last updated time as Unix timestamp in seconds
             * @example 1640995200
             */
            updated_at?: number | null;
            vms?: null | components["schemas"]["node-api_VmList"];
            /** @example hayesvalley */
            zone?: string | null;
        };
        /** @enum {string} */
        "node-api_NodeType": "autoreserved" | "reserved";
        /** @enum {string} */
        "node-api_Region": "NorthAmerica" | "AsiaPacific" | "EuropeMiddleEastAfrica";
        /**
         * @description Node Status
         * @enum {string}
         */
        "node-api_Status": "pending" | "awaitingcapacity" | "running" | "released" | "terminated" | "deleted" | "failed" | "unknown";
        /**
         * Format: int64
         * @description Unix timestamp in seconds since epoch
         */
        "node-api_UnixEpoch": number;
        "node-api_Vm": {
            /**
             * Format: int64
             * @example 1640995200
             */
            created_at: number;
            /**
             * Format: int64
             * @example 1640998200
             */
            end_at: number | null;
            /** @example vm_myOZZXw4pfcp7H9DQOldd */
            id: string;
            /** @example vm */
            object: string;
            /**
             * Format: int64
             * @example 1640995200
             */
            start_at: number | null;
            status: components["schemas"]["node-api_VmStatus"];
            /**
             * Format: int64
             * @example 1640995200
             */
            updated_at: number;
        };
        "node-api_VmList": {
            data: components["schemas"]["node-api_Vm"][];
            /** @example list */
            object: string;
        };
        /** @enum {string} */
        "node-api_VmStatus": "Pending" | "Running" | "Destroyed" | "NodeFailure" | "Unspecified";
        "node-api_ZoneInfo": {
            /** @description The available capacity on this cluster, in the
             *     shape of consecutive "availability rectangles". */
            available_capacity: components["schemas"]["node-api_AvailabilityRectangle"][];
            delivery_type: components["schemas"]["node-api_DeliveryType"];
            hardware_type: components["schemas"]["node-api_AcceleratorType"];
            interconnect_type: components["schemas"]["node-api_InterconnectType"];
            name: string;
            object: string;
            region: components["schemas"]["node-api_Region"];
        };
        /** @description Response body for the account/me endpoint. */
        "market-api_AccountMeResponse": {
            /**
             * Format: u-int64
             * @description When the account was created as a epoch unix timestamp
             * @example 1749704176
             */
            created_at: number;
            /**
             * @description The unique identifier for the account
             * @example gmail-com-name
             */
            id: string;
            /**
             * @description Whether the account is currently frozen
             * @example false
             */
            is_frozen: boolean;
            /**
             * @description The KYC (Know Your Customer) verification level
             * @example basic
             */
            kyc: string;
            /**
             * @description Whether the KYC-B form has been submitted
             * @example false
             */
            kycb_form_submitted: boolean;
            /**
             * @description The role assigned to this account
             * @example user
             */
            role: string;
            /**
             * @description Whether the user has submitted the waitlist form
             * @example true
             */
            submitted_waitlist: boolean;
            /**
             * @description Whether the user is on the waitlist
             * @example false
             */
            waitlist: boolean;
        };
        "market-api_AccountRefundsResponse": {
            /**
             * @example refunds
             * @enum {string}
             */
            object: "refunds";
            refunds: components["schemas"]["market-api_RefundResponse"][];
        };
        "market-api_CancelOrderResponse": {
            object: components["schemas"]["market-api_CancelOrderStatus"];
        };
        /** @enum {string} */
        "market-api_CancelOrderStatus": "pending";
        /** @description string with format '"clus"_{base62_encoded_id}' used for referencing a ClusterId resource. Never user-generated. */
        "market-api_ClusterId": string;
        "market-api_ClusterName": string;
        "market-api_ColocationStrategy": {
            /** @enum {string} */
            type: "anywhere";
        } | {
            /** @enum {string} */
            type: "colocate";
        } | {
            /** @enum {string} */
            type: "colocate-pinned";
        } | {
            cluster_name: components["schemas"]["market-api_ClusterName"];
            /** @enum {string} */
            type: "pinned";
        };
        /** @description string with format '"cont"_{base62_encoded_id}' used for referencing a ContractId resource. Never user-generated. */
        "market-api_ContractId": string;
        "market-api_ContractResponse": {
            cluster_id?: null | components["schemas"]["market-api_ClusterId"];
            colocate_with?: components["schemas"]["market-api_ContractId"][];
            created_at: components["schemas"]["market-api_ISO8601DateTime"];
            id: components["schemas"]["market-api_ContractId"];
            instance_type: components["schemas"]["market-api_Ticker"];
            /**
             * @example contract
             * @enum {string}
             */
            object: "contract";
            shape: components["schemas"]["market-api_ContractShape"];
            state: components["schemas"]["market-api_ContractState"];
            status: components["schemas"]["market-api_ContractStatus"];
        };
        "market-api_ContractShape": {
            intervals: components["schemas"]["market-api_ISO8601DateTime"][];
            quantities: number[];
        };
        /** @enum {string} */
        "market-api_ContractState": "Upcoming" | "Active" | "Expired";
        /** @enum {string} */
        "market-api_ContractStatus": "active" | "pending";
        "market-api_CreateOrderRequest": {
            cluster?: null | components["schemas"]["market-api_ClusterName"];
            /** @description A contract to colocate with. This overrides the instance_type if specified. */
            colocate_with?: components["schemas"]["market-api_ContractId"][];
            end_at: components["schemas"]["market-api_NowOrISO8601DateTime"];
            flags?: components["schemas"]["market-api_OrderFlags"];
            instance_type?: null | components["schemas"]["market-api_Ticker"];
            /**
             * Format: int64
             * @description Price in cents
             * @example 5000
             */
            price: number;
            /**
             * Format: int32
             * @example 10
             */
            quantity: number;
            /** @enum {string} */
            side: "buy";
            start_at: components["schemas"]["market-api_NowOrISO8601DateTime"];
        } | {
            contract_id: components["schemas"]["market-api_ContractId"];
            end_at: components["schemas"]["market-api_NowOrISO8601DateTime"];
            flags?: components["schemas"]["market-api_OrderFlags"];
            /**
             * Format: int64
             * @description Price in cents
             * @example 4500
             */
            price: number;
            /**
             * Format: int32
             * @example 5
             */
            quantity: number;
            reprice?: unknown;
            /** @enum {string} */
            side: "sell";
            start_at: components["schemas"]["market-api_NowOrISO8601DateTime"];
        };
        /** @example {
         *       "object": "order",
         *       "status": "pending",
         *       "id": "order_xyz789",
         *       "idempotency_key": "key_123"
         *     } */
        "market-api_CreateOrderResponse": {
            id: components["schemas"]["market-api_OrderId"];
            /** @example key_123 */
            idempotency_key?: string | null;
            /**
             * @example order
             * @enum {string}
             */
            object: "order";
            status: components["schemas"]["market-api_CreateOrderStatus"];
        };
        /** @enum {string} */
        "market-api_CreateOrderStatus": "pending" | "filled" | "cancelled";
        "market-api_CreateProcurementRequest": {
            /**
             * Format: int32
             * @description Maximum price per GPU hour in cents
             * @example 250
             */
            buy_limit_price_per_gpu_hour?: number;
            /** @description Colocation strategy for the procurement */
            colocation_strategy?: components["schemas"]["market-api_ColocationStrategy"];
            /**
             * Format: int32
             * @description Desired quantity of nodes
             * @example 5
             */
            desired_quantity: number;
            /**
             * Format: int32
             * @description Planning horizon in minutes
             * @example 60
             */
            horizon?: number;
            /** @description Instance type to procure */
            instance_type: components["schemas"]["market-api_Ticker"];
            /**
             * Format: int32
             * @description Minimum price per GPU hour in cents when selling back
             * @example 25
             */
            sell_limit_price_per_gpu_hour?: number;
            /** @description Procurement status (active or disabled) */
            status?: components["schemas"]["market-api_ProcurementStatus"];
        };
        "market-api_ErrorDetail": {
            /** @description Specific error code for this detail */
            code: string;
            /** @description The field that caused the error (for validation errors) */
            field?: string | null;
            /** @description Detailed error message */
            message: string;
        };
        /** @enum {string} */
        "market-api_ErrorType": "api_error" | "invalid_request_error" | "authentication_error" | "idempotency_error" | "conflict" | "not_found" | "request_timed_out" | "forbidden" | "not_implemented" | "upgrade_required" | "payment_required" | "service_unavailable";
        /**
         * @description Response body for getting account balance from the credit ledger.
         * @example {
         *       "object": "balance",
         *       "available_cents": 150000,
         *       "current_cents": 180000,
         *       "current_overage_cents": 0,
         *       "current_hold_cents": 0,
         *       "created_at": 1640995200,
         *       "updated_at": 1640995200
         *     }
         */
        "market-api_GetBalanceResponse": {
            /**
             * Format: u-int64
             * @description Available balance in cents: sum(credit) - sum(debit) - sum(committed holds)
             * @example 150000
             */
            available_balance_cents: number;
            /**
             * Format: int64
             * @description When the balance was first created as a unix timestamp
             * @example 1640995200
             */
            created_at: number;
            /**
             * Format: u-int64
             * @description Reserved balance in cents: sum(credit) - sum(debit)
             * @example 180000
             */
            current_balance_cents: number;
            /**
             * Format: u-int64
             * @description Total spend that hasn't been paid for yet, in cents.
             * @example 0
             */
            current_overage_cents: number;
            /**
             * @example balances
             * @enum {string}
             */
            object: "balances";
            /**
             * Format: u-int64
             * @description The maximum amount of overages the account can incur before they are blocked from buying compute.
             * @example 0
             */
            overage_limit_cents: number;
            /**
             * Format: int64
             * @description When the balance was last updated as a unix timestamp
             * @example 1640995200
             */
            updated_at: number;
        };
        /**
         * @description TODO rename route to "balance"?
         *     Response body for getting account credits.
         * @example {
         *       "current_balance_cents": 150000,
         *       "available_credits_cents": 150000,
         *       "amount_due_next_billing_period_cents": 0
         *     }
         */
        "market-api_GetCreditsResponse": {
            /**
             * Format: int64
             * @description The amount due for the next billing period in cents (positive means customer owes, 0 or negative means no payment due)
             * @example 0
             */
            amount_due_next_billing_period_cents: number;
            /**
             * Format: int64
             * @description The available prepaid credits in cents (always positive)
             * @example 150000
             */
            available_credits_cents: number;
            /**
             * Format: int64
             * @description The current balance in cents (from customer account)
             * @example 150000
             */
            current_balance_cents: number;
        };
        /**
         * Format: date-time
         * @description An ISO 8601 datetime string
         * @example 2025-07-11T20:41:37.423Z
         */
        "market-api_ISO8601DateTime": string;
        "market-api_KubernetesClusterResponse": {
            contract?: null | components["schemas"]["market-api_ContractResponse"];
            /** @example https://cluster.example.com */
            kubernetes_api_url?: string | null;
            /** @example -----BEGIN CERTIFICATE-----... */
            kubernetes_ca_cert?: string | null;
            /** @example sf-user123 */
            kubernetes_namespace: string;
            name: components["schemas"]["market-api_ClusterName"];
            /**
             * @example kubernetes_cluster
             * @enum {string}
             */
            object: "kubernetes_cluster";
        };
        "market-api_ListClustersResponse": {
            data: components["schemas"]["market-api_KubernetesClusterResponse"][];
            has_more: boolean;
            /**
             * @example list
             * @enum {string}
             */
            object: "list";
        };
        "market-api_ListContractsResponse": {
            data: components["schemas"]["market-api_ContractResponse"][];
            has_more: boolean;
            /**
             * @example list
             * @enum {string}
             */
            object: "list";
        };
        "market-api_ListOrdersResponse": {
            data: components["schemas"]["market-api_OrderResponse"][];
            has_more: boolean;
            /**
             * @example list
             * @enum {string}
             */
            object: "list";
        };
        "market-api_ListProcurementsResponse": {
            data: components["schemas"]["market-api_ProcurementResponse"][];
            has_more: boolean;
            /**
             * @example list
             * @enum {string}
             */
            object: "list";
        };
        "market-api_ListTransactionsResponse": {
            data: components["schemas"]["market-api_TransactionResponse"][];
            has_more: boolean;
            /**
             * @example list
             * @enum {string}
             */
            object: "list";
        };
        /**
         * @description Request body for migrating an account to the new billing system.
         * @example {
         *       "type": "withdraw",
         *       "column_counterparty_id": "cpty_2n4f8bxg3qj5p6r7s9t1v"
         *     }
         */
        "market-api_MigrateAccountRequest": {
            /**
             * @description The identifier for your external bank account where funds will be transferred
             * @example cpty_2n4f8bxg3qj5p6r7s9t1v
             */
            column_counterparty_id: string;
            /** @enum {string} */
            type: "withdraw";
        } | {
            /** @enum {string} */
            type: "convert_to_credits";
        };
        /**
         * @description Response body for account migration requests.
         * @example {
         *       "status": "migrated"
         *     }
         * @enum {string}
         */
        "market-api_MigrateAccountResponse": "migrated" | "requires_manual_migration";
        /**
         * @description A date/time value that can be either "NOW" or an ISO 8601 datetime string
         * @example NOW
         * @example 2025-07-11T20:41:37.423Z
         */
        "market-api_NowOrISO8601DateTime": string;
        /** @enum {string} */
        "market-api_ObjectType": "balance" | "transaction" | "transaction_details" | "list";
        /** @description Configure more fine grained order behavior. */
        "market-api_OrderFlags": {
            /** @description If true, the order will be automatically cancelled if it doesn't
             *     immediately fill when being placed. */
            ioc?: boolean;
            /** @description If true, ignores the set limit price and matches any price that is available. */
            market?: boolean;
            /** @description If true, places the order straight into the book without trying to match
             *     against existing orders. */
            post_only?: boolean;
            /** @description If the order start time should be automatically changed to "now" once
             *     start time < "now", proportionally changing it's limit price to reflect
             *     it's shorter duration. */
            prorate?: boolean;
        };
        /** @description string with format '"ordr"_{base62_encoded_id}' used for referencing a OrderId resource. Never user-generated. */
        "market-api_OrderId": string;
        "market-api_OrderResponse": {
            cancelled: boolean;
            cancelled_at?: null | components["schemas"]["market-api_ISO8601DateTime"];
            cluster?: null | components["schemas"]["market-api_ClusterName"];
            colocate_with?: components["schemas"]["market-api_ContractId"][];
            created_at: components["schemas"]["market-api_ISO8601DateTime"];
            duration: components["schemas"]["market-api_UnixEpoch"];
            end_at: components["schemas"]["market-api_ISO8601DateTime"];
            executed: boolean;
            executed_at?: null | components["schemas"]["market-api_ISO8601DateTime"];
            /** Format: int64 */
            execution_price?: number | null;
            flags: components["schemas"]["market-api_OrderFlags"];
            id: components["schemas"]["market-api_OrderId"];
            instance_type: components["schemas"]["market-api_Ticker"];
            /**
             * @example order
             * @enum {string}
             */
            object: "order";
            /**
             * Format: int64
             * @description Price in cents
             * @example 2850000
             */
            price: number;
            /**
             * Format: int32
             * @example 4
             */
            quantity: number;
            rejected: boolean;
            rejected_reason?: string | null;
            side: components["schemas"]["market-api_OrderSide"];
            start_at: components["schemas"]["market-api_ISO8601DateTime"];
            status: components["schemas"]["market-api_OrderStatus"];
        };
        /** @enum {string} */
        "market-api_OrderSide": "buy" | "sell";
        /** @enum {string} */
        "market-api_OrderStatus": "open" | "filled" | "cancelled" | "rejected";
        /** @enum {string} */
        "market-api_ProcurementMessage": "insufficient_balance" | "running";
        "market-api_ProcurementResponse": {
            /**
             * Format: int32
             * @example 250
             */
            buy_limit_price_per_gpu_hour: number;
            colocation_strategy: components["schemas"]["market-api_ColocationStrategy"];
            /**
             * Format: int32
             * @example 1
             */
            desired_quantity: number;
            /**
             * Format: int32
             * @example 60
             */
            horizon: number;
            /** @example proc_W9TRG */
            id: string;
            instance_type: components["schemas"]["market-api_Ticker"];
            last_message: components["schemas"]["market-api_ProcurementMessage"];
            /**
             * @example procurement
             * @enum {string}
             */
            object: "procurement";
            /**
             * Format: int32
             * @example 25
             */
            sell_limit_price_per_gpu_hour: number;
            status: components["schemas"]["market-api_ProcurementStatus"];
        };
        /** @enum {string} */
        "market-api_ProcurementStatus": "active" | "disabled";
        "market-api_RefundResponse": {
            memo_amount?: string | null;
            refund_timestamp?: null | components["schemas"]["market-api_ISO8601DateTime"];
            report_cluster_id: components["schemas"]["market-api_ClusterId"];
            report_created_at: components["schemas"]["market-api_ISO8601DateTime"];
            report_end_time: components["schemas"]["market-api_ISO8601DateTime"];
            /** Format: int64 */
            report_id: number;
            report_memo: string;
            /** Format: int32 */
            report_nodes_affected: number;
            report_start_time: components["schemas"]["market-api_ISO8601DateTime"];
            status: components["schemas"]["market-api_RefundStatus"];
        };
        /** @enum {string} */
        "market-api_RefundStatus": "in_review" | "approved" | "refunded" | "denied";
        /** @description Standard error response format following API guidelines. */
        "market-api_SerdeErrorProxy": {
            /** @description Array of detailed error information when applicable */
            details: components["schemas"]["market-api_ErrorDetail"][];
            /** @description Human-readable error message */
            message: string;
            /** @description The error type identifier */
            type: components["schemas"]["market-api_ErrorType"];
        };
        /**
         * @description Sort field for listing orders
         * @example created_at
         * @example start_time
         * @enum {string}
         */
        "market-api_SortBy": "created_at" | "start_time";
        /**
         * @description Sort direction for listing orders
         * @example ASC
         * @example DESC
         * @enum {string}
         */
        "market-api_SortDirection": "ASC" | "DESC";
        /**
         * @example h100i
         * @example h100v
         * @example h200ki
         */
        "market-api_Ticker": string;
        "market-api_TransactionDetails": {
            card_brand: string;
            card_funding: string;
            card_last4: string;
            object: components["schemas"]["market-api_ObjectType"];
            receipt_url: string;
            /** @enum {string} */
            type: "stripe_card_payment";
        } | {
            description: string;
            /** @enum {string} */
            type: "out_of_band_payment";
        } | {
            memo: string;
            object: components["schemas"]["market-api_ObjectType"];
            /** @enum {string} */
            type: "credit_grant";
        } | {
            object: components["schemas"]["market-api_ObjectType"];
            /** @enum {string} */
            type: "refund";
        } | {
            object: components["schemas"]["market-api_ObjectType"];
            order_id: components["schemas"]["market-api_OrderId"];
            /** @enum {string} */
            type: "buy_order";
        } | {
            object: components["schemas"]["market-api_ObjectType"];
            order_id: components["schemas"]["market-api_OrderId"];
            /** @enum {string} */
            type: "buy_order_hold";
        };
        /** @description string with format '"tx"_{base62_encoded_id}' used for referencing a TransactionId resource. Never user-generated. */
        "market-api_TransactionId": string;
        "market-api_TransactionResponse": {
            /**
             * Format: int64
             * @description Transaction amount in cents (e.g., 50000 = $500.00)
             * @example 50000
             */
            amount_cents: number;
            /** @description Unique identifier for the transaction */
            id: components["schemas"]["market-api_TransactionId"];
            /**
             * @example transaction
             * @enum {string}
             */
            object: "transaction";
            transaction_details: components["schemas"]["market-api_TransactionDetails"];
            /**
             * Format: int64
             * @description Time the transaction took place as Unix timestamp in seconds.
             * @example 1640995200
             */
            transaction_time: number;
        };
        /**
         * Format: int64
         * @description Unix timestamp in seconds since epoch
         */
        "market-api_UnixEpoch": number;
        "market-api_UpdateProcurementRequest": {
            /**
             * Format: int32
             * @description Maximum price per GPU hour in cents
             * @example 350
             */
            buy_limit_price_per_gpu_hour?: number | null;
            /**
             * Format: int32
             * @description Desired quantity of nodes
             * @example 5
             */
            desired_quantity?: number | null;
            /**
             * Format: int32
             * @description Planning horizon in minutes. The procurement will try to buy compute
             *     ahead of time as to always have at least this amount of time ahead
             *     scheduled at a minimum.
             * @example 120
             */
            horizon?: number | null;
            instance_type?: null | components["schemas"]["market-api_Ticker"];
            /**
             * Format: int32
             * @description Minimum price per GPU hour in cents when selling back
             * @example 50
             */
            sell_limit_price_per_gpu_hour?: number | null;
            status?: null | components["schemas"]["market-api_ProcurementStatus"];
        };
        large_scale_inference_Batch: {
            account_id: string;
            /** Format: date-time */
            cancelled_at?: string | null;
            /** Format: date-time */
            cancelling_at?: string | null;
            /** Format: date-time */
            completed_at?: string | null;
            completion_window: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            deadline_at: string;
            endpoint: string;
            errors?: null | components["schemas"]["large_scale_inference_BatchErrors"];
            /** Format: date-time */
            expired_at?: string | null;
            /** Format: date-time */
            expires_at?: string | null;
            /** Format: date-time */
            failed_at?: string | null;
            /** Format: date-time */
            finalizing_at?: string | null;
            id: string;
            /** Format: date-time */
            in_progress_at?: string | null;
            input_file_uri: string;
            metadata?: null | components["schemas"]["large_scale_inference_BatchMetadata"];
            model_id: string;
            object: string;
            output_file_uri: string;
            request_counts: components["schemas"]["large_scale_inference_RequestCounts"];
            status: components["schemas"]["large_scale_inference_BatchStatus"];
        };
        large_scale_inference_BatchErrorData: {
            code: string;
            /** Format: u-int32 */
            line?: number | null;
            message: string;
            param?: string | null;
        };
        large_scale_inference_BatchErrors: {
            data: components["schemas"]["large_scale_inference_BatchErrorData"][];
            object: string;
        };
        large_scale_inference_BatchMetadata: {
            input_token_usage?: string | null;
            output_token_usage?: string | null;
        };
        large_scale_inference_BatchRequest: {
            completion_window: string;
            endpoint: string;
            input_file_uri: string;
            metadata?: null | components["schemas"]["large_scale_inference_BatchMetadata"];
            model_id: string;
            output_file_uri: string;
            store: string;
        };
        large_scale_inference_BatchRequests: components["schemas"]["large_scale_inference_BatchRequest"] | components["schemas"]["large_scale_inference_BatchRequest"][];
        /** @enum {string} */
        large_scale_inference_BatchStatus: "accepted" | "compute_purchased" | "not_started" | "started" | "validating" | "failed" | "in_progress" | "finalizing" | "completed" | "expired" | "cancelling" | "cancelled" | "waiting";
        large_scale_inference_BlendedPrice: {
            /** Format: double */
            cents_per_million_tokens: number;
        };
        large_scale_inference_ErrorDetail: {
            /** @description Specific error code for this detail */
            code: string;
            /** @description The field that caused the error (for validation errors) */
            field?: string | null;
            /** @description Detailed error message */
            message: string;
        };
        /** @enum {string} */
        large_scale_inference_ErrorType: "api_error" | "invalid_request_error" | "authentication_error" | "idempotency_error" | "conflict" | "not_found" | "request_timed_out" | "forbidden" | "not_implemented" | "upgrade_required" | "payment_required" | "service_unavailable";
        large_scale_inference_Model: {
            /** Format: date-time */
            created_at: string;
            external_reference: string;
            id: string;
            name: string;
            /** Format: date-time */
            retired_at?: string | null;
        };
        large_scale_inference_Price: {
            Blended: components["schemas"]["large_scale_inference_BlendedPrice"];
        } | {
            Specific: components["schemas"]["large_scale_inference_SpecificPrice"];
        };
        large_scale_inference_RequestCounts: {
            /** Format: u-int32 */
            completed: number;
            /** Format: u-int32 */
            failed: number;
            /** Format: u-int32 */
            total: number;
        };
        /** @description Standard error response format following API guidelines. */
        large_scale_inference_SerdeErrorProxy: {
            /** @description Array of detailed error information when applicable */
            details: components["schemas"]["large_scale_inference_ErrorDetail"][];
            /** @description Human-readable error message */
            message: string;
            /** @description The error type identifier */
            type: components["schemas"]["large_scale_inference_ErrorType"];
        };
        large_scale_inference_SpecificPrice: {
            /** Format: double */
            cents_per_million_input_tokens: number;
            /** Format: double */
            cents_per_million_output_tokens: number;
        };
        /** @description Quote details with side-specific fields
         *
         *     The response structure differs based on order side:
         *     - Buy orders include `instance_type`
         *     - Sell orders include `contract_id` */
        quoter_ApiQuoteDetails: {
            /** @description End time: ISO 8601 */
            end_at: components["schemas"]["quoter_NowOrISO8601DateTime"];
            /** @description Instance type being quoted */
            instance_type: string;
            /**
             * Format: u-int64
             * @description Total price in cents (USD)
             */
            price: number;
            /**
             * Format: u-int64
             * @description Number of nodes
             */
            quantity: number;
            /** @description Start time: ISO 8601 or "NOW" */
            start_at: components["schemas"]["quoter_NowOrISO8601DateTime"];
            zone: string;
        } | {
            /** @description Contract being sold from */
            contract_id: components["schemas"]["quoter_ContractId"];
            /** @description End time: ISO 8601 */
            end_at: components["schemas"]["quoter_NowOrISO8601DateTime"];
            /**
             * Format: u-int64
             * @description Total price in cents (USD)
             */
            price: number;
            /**
             * Format: u-int64
             * @description Number of nodes
             */
            quantity: number;
            /** @description Start time: ISO 8601 or "NOW" */
            start_at: components["schemas"]["quoter_NowOrISO8601DateTime"];
        };
        /** @description Response format for GET /v0/quote
         *
         *     Returns a quote object with side-specific details.
         *     If no quote is available, the `quote` field will be `None`. */
        quoter_ApiQuoteResponse: {
            /** @description Always "quote" */
            object: string;
            quote?: null | components["schemas"]["quoter_ApiQuoteDetails"];
            /** @description Matches the requested side: "buy" or "sell" */
            side: string;
        };
        /** @description string with format '"cont"_{base62_encoded_id}' used for referencing a ContractId resource. Never user-generated. */
        quoter_ContractId: string;
        /** @enum {string} */
        quoter_ErrorType: "api_error" | "invalid_request_error" | "authentication_error" | "idempotency_error" | "conflict" | "not_found" | "request_timed_out" | "forbidden" | "not_implemented" | "upgrade_required" | "payment_required" | "service_unavailable";
        /**
         * @description A date/time value that can be either "NOW" or an ISO 8601 datetime string
         * @example NOW
         * @example 2025-07-11T20:41:37.423Z
         */
        quoter_NowOrISO8601DateTime: string;
        /** @description Side-specific parameters for quote requests */
        quoter_OrderSideParams: {
            /** @description Cluster constraint (optional) - hostname to resolve to cluster_id */
            cluster?: string | null;
            colocate_with?: null | components["schemas"]["quoter_ContractId"];
            /** @description Instance type for buy orders: "h100i", "h100v", or "h200ki" */
            instance_type: string;
            /** @enum {string} */
            side: "buy";
        } | {
            /** @description Contract ID for sell orders (must be owned by user) */
            contract_id: components["schemas"]["quoter_ContractId"];
            /** @enum {string} */
            side: "sell";
        };
        /** @description Query parameters for GET /v0/quote
         *
         *     # Validation Rules
         *
         *     ## Required Fields
         *     - `side`: Must be "buy" or "sell"
         *     - `quantity`: Must be a positive integer (1-1024)
         *
         *     ## Date Constraints
         *     - `min_start_date` and `max_start_date` accept:
         *       - "NOW" (literal string for current time)
         *       - ISO 8601 date string
         *     - If neither provided, defaults to "NOW"
         *     - `max_start_date` must be >= `min_start_date`
         *
         *     ## Duration Constraints (mutually exclusive)
         *     - EITHER provide `duration` (in seconds)
         *     - OR provide both `min_duration` AND `max_duration` (in seconds)
         *     - All durations must be positive
         *     - Maximum duration: 3 years (94,608,000 seconds)
         *     - When `duration` is provided, it expands to a range:
         *       - min = duration
         *       - max = duration + 59 minutes
         *
         *     ## Side-Specific Constraints
         *
         *     ### Buy Orders
         *     - **Required**: `instance_type` (must be one of: "h100i", "h100v", "h200ki")
         *     - **Optional**: `colocate_with` (contract ID), `cluster`
         *     - **Forbidden**: `contract_id`
         *
         *     ### Sell Orders
         *     - **Required**: `contract_id` (must be owned by authenticated user)
         *     - **Forbidden**: `instance_type`, `cluster`, `colocate_with` */
        quoter_QuoteRequestParams: components["schemas"]["quoter_OrderSideParams"] & components["schemas"]["quoter_SpatialQuoteParams"];
        /** @description Spatial parameters for quote requests (time, quantity, duration) */
        quoter_SpatialQuoteParams: {
            /**
             * Format: u-int64
             * @description Exact duration in seconds (mutually exclusive with min_duration/max_duration)
             */
            duration?: number | null;
            /**
             * Format: u-int64
             * @description Maximum duration in seconds (must be used with min_duration)
             */
            max_duration?: number | null;
            max_start_date?: null | components["schemas"]["quoter_NowOrISO8601DateTime"];
            /**
             * Format: u-int64
             * @description Minimum duration in seconds (must be used with max_duration)
             */
            min_duration?: number | null;
            min_start_date?: null | components["schemas"]["quoter_NowOrISO8601DateTime"];
            /**
             * Format: u-int64
             * @description Number of nodes (1-1024)
             */
            quantity: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_vms_instances: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["vmorch_GetInstancesResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_vms_logs2: {
        parameters: {
            query: {
                instance_id: string;
                before_seqnum?: number;
                since_seqnum?: number;
                before_realtime_timestamp?: string;
                since_realtime_timestamp?: string;
                order_by: "seqnum_asc" | "seqnum_desc";
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["vmorch_VmsLogsResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_vms_replace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["vmorch_PostReplaceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["vmorch_PostReplaceResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_vms_user_data: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["vmorch_GetUserDataResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_vms_user_data: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["vmorch_PostUserDataRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["vmorch_PostUserDataResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_vms_ssh: {
        parameters: {
            query: {
                vm_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["vmorch_GetSshResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_zones_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of zones */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["node-api_ListResponse_ZoneInfo"];
                };
            };
            /** @description Unauthorized request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "Unauthorized: missing or invalid authentication token",
                     *         "request_id": "req_1234567890"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "Internal server error",
                     *         "request_id": "req_1234567890"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
        };
    };
    get_zone_handler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Zone ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Zone information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["node-api_ZoneInfo"];
                };
            };
            /** @description Unauthorized request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "Unauthorized: missing or invalid authentication token",
                     *         "request_id": "req_1234567890"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "You do not have permission to get zones"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Zone not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "Zone not found",
                     *         "request_id": "req_1234567890"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "Internal server error",
                     *         "request_id": "req_1234567890"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
        };
    };
    health_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health check successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example OK */
                    "text/plain": string;
                };
            };
            /** @description Health check failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example Internal Server Error */
                    "text/plain": string;
                };
            };
        };
    };
    list_nodes_handler: {
        parameters: {
            query?: {
                /** @description Filter nodes by node_id
                 *     Use ?id=n_b1dc52505c6db142&id=n_b1dc52505c6db133 to specify multiple IDs.
                 *     Cannot be used with name */
                id?: string[];
                /**
                 * @description Filter nodes by their names
                 *     Use ?name=val1&name=val2 to specify multiple names.
                 *     Cannot be used with id
                 * @example [
                 *       "cuda-crunch"
                 *     ]
                 */
                name?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of nodes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "list",
                     *       "data": [
                     *         {
                     *           "object": "node",
                     *           "id": "n_b1dc52505c6db142",
                     *           "name": "cuda-crunch",
                     *           "zone": "hayesvalley",
                     *           "gpu_type": "H100",
                     *           "owner": "sfcompute",
                     *           "status": "running",
                     *           "created_at": 1640995200,
                     *           "updated_at": 1640995200,
                     *           "start_at": 1640995200,
                     *           "procurement_id": "proc_b1dc52505c6de142",
                     *           "max_price_per_node_hour": 1000,
                     *           "node_type": "autoreserved",
                     *           "vms": {
                     *             "object": "list",
                     *             "data": [
                     *               {
                     *                 "object": "vm",
                     *                 "id": "vm_myOZZXw4pfcp7H9DQOldd",
                     *                 "status": "running",
                     *                 "created_at": 1640995200,
                     *                 "updated_at": 1640995200,
                     *                 "start_at": 1640995200,
                     *                 "end_at": 1641007200
                     *               }
                     *             ]
                     *           }
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["node-api_ListResponse_Node"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "Invalid query parameters",
                     *         "details": [
                     *           {
                     *             "field": "node_id|name",
                     *             "code": "invalid_value",
                     *             "message": "Cannot specify both node_id and name parameters"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Unauthorized request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "Unauthorized: missing or invalid authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "You do not have permission to list nodes"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "Internal server error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
        };
    };
    create_nodes_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["node-api_CreateNodesRequest"];
            };
        };
        responses: {
            /** @description Nodes created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "list",
                     *       "data": [
                     *         {
                     *           "object": "node",
                     *           "id": "n_b1dc52505c6db142",
                     *           "name": "cuda-crunch",
                     *           "zone": "hayesvalley",
                     *           "gpu_type": "H100",
                     *           "owner": "sfcompute",
                     *           "status": "running",
                     *           "created_at": 1640995200,
                     *           "updated_at": 1640995200,
                     *           "start_at": 1640995200,
                     *           "procurement_id": "proc_b1dc52505c6de142",
                     *           "max_price_per_node_hour": 1000,
                     *           "node_type": "autoreserved"
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["node-api_ListResponse_Node"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "One or more fields are invalid",
                     *         "details": [
                     *           {
                     *             "field": "start_at",
                     *             "code": "invalid_value",
                     *             "message": "start_at time must be in the future"
                     *           },
                     *           {
                     *             "field": "names",
                     *             "code": "invalid_value",
                     *             "message": "node name 'vm_test' cannot follow the vm_id pattern vm_{16_hex_chars} as this prefix is reserved for system-generated IDs"
                     *           },
                     *           {
                     *             "field": "names",
                     *             "code": "invalid_value",
                     *             "message": "node name cannot be a numeric string"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Unauthorized request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "Unauthorized: missing or invalid authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "You do not have permission to create nodes"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "Internal server error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
        };
    };
    get_node_handler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Node ID or name */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Node details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "node",
                     *       "id": "n_b1dc52505c6db142",
                     *       "name": "cuda-crunch",
                     *       "zone": "hayesvalley",
                     *       "gpu_type": "H100",
                     *       "owner": "sfcompute",
                     *       "status": "running",
                     *       "created_at": 1640995200,
                     *       "updated_at": 1640995200,
                     *       "start_at": 1640995200,
                     *       "procurement_id": "proc_b1dc52505c6de142",
                     *       "max_price_per_node_hour": 1000,
                     *       "node_type": "autoreserved",
                     *       "vms": {
                     *         "object": "list",
                     *         "data": [
                     *           {
                     *             "object": "vm",
                     *             "id": "vm_myOZZXw4pfcp7H9DQOldd",
                     *             "status": "running",
                     *             "created_at": 1640995200,
                     *             "updated_at": 1640995200,
                     *             "start_at": 1640995200,
                     *             "end_at": 1641007200
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_Node"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "Invalid node identifier",
                     *         "details": [
                     *           {
                     *             "field": "id",
                     *             "code": "invalid_value",
                     *             "message": "Numeric strings are not supported as node identifiers"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Unauthorized request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "Unauthorized: missing or invalid authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "You do not have permission to access this node"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Node not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "Node not found"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "Internal server error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
        };
    };
    extend_node_handler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Node ID or name */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["node-api_ExtendNodeRequest"];
            };
        };
        responses: {
            /** @description Node extended successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "node",
                     *       "id": "n_b1dc52505c6db142",
                     *       "name": "cuda-crunch",
                     *       "zone": "hayesvalley",
                     *       "gpu_type": "H100",
                     *       "owner": "sfcompute",
                     *       "status": "running",
                     *       "created_at": 1640995200,
                     *       "updated_at": 1640995200,
                     *       "start_at": 1640995200,
                     *       "end_at": 1641007200,
                     *       "max_price_per_node_hour": 1000,
                     *       "node_type": "reserved",
                     *       "vms": {
                     *         "object": "list",
                     *         "data": [
                     *           {
                     *             "object": "vm",
                     *             "id": "vm_myOZZXw4pfcp7H9DQOldd",
                     *             "status": "running",
                     *             "created_at": 1640995200,
                     *             "updated_at": 1640995200,
                     *             "start_at": 1640995200,
                     *             "end_at": 1641007200
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_Node"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "Node is Auto Reserved not Reserved - only reservation nodes can be extended",
                     *         "details": [
                     *           {
                     *             "field": "duration_seconds",
                     *             "code": "invalid_value",
                     *             "message": "duration must be at least 1 hour (3600 seconds)"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Unauthorized request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "Unauthorized: missing or invalid authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen or node is not associated with this account"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Node not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "Node not found"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Extension failed due to capacity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "Extension failed: No capacity available for the requested time period"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "Internal server error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
        };
    };
    release_node_handler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Node ID or name */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Node released successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "node",
                     *       "id": "n_b1dc52505c6db142",
                     *       "name": "cuda-crunch",
                     *       "zone": "hayesvalley",
                     *       "gpu_type": "H100",
                     *       "owner": "sfcompute",
                     *       "status": "terminated",
                     *       "created_at": 1640995200,
                     *       "updated_at": 1640995200,
                     *       "start_at": 1640995200,
                     *       "end_at": 1641000000,
                     *       "max_price_per_node_hour": 1000,
                     *       "node_type": "autoreserved",
                     *       "procurement_id": "proc_b1dc52505c6de142",
                     *       "vms": {
                     *         "object": "list",
                     *         "data": [
                     *           {
                     *             "object": "vm",
                     *             "id": "vm_myOZZXw4pfcp7H9DQOldd",
                     *             "status": "running",
                     *             "created_at": 1640995200,
                     *             "updated_at": 1640995200,
                     *             "start_at": 1640995200,
                     *             "end_at": 1641007200
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_Node"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "Node is Reserved not Auto Reserved - only autoreserved nodes can be released"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Unauthorized request */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "Unauthorized: missing or invalid authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen or node is not associated with this account"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Node not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "Node not found"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "Internal server error"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["node-api_ErrorObject"];
                };
            };
        };
    };
    listClusters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Kubernetes clusters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "list",
                     *       "data": [
                     *         {
                     *           "object": "kubernetes_cluster",
                     *           "name": "starlight",
                     *           "kubernetes_namespace": "sf-user123",
                     *           "kubernetes_api_url": "https://starlight.sf-k8s.com",
                     *           "kubernetes_ca_cert": "-----BEGIN CERTIFICATE-----...",
                     *           "contract": {
                     *             "object": "contract",
                     *             "status": "active",
                     *             "id": "cont_xyz123",
                     *             "created_at": "2024-07-15T22:30:17.426Z",
                     *             "instance_type": "h100i",
                     *             "shape": {
                     *               "intervals": [
                     *                 "2024-07-16T00:00:00Z",
                     *                 "2024-07-17T00:00:00Z"
                     *               ],
                     *               "quantities": [
                     *                 4,
                     *                 0
                     *               ]
                     *             },
                     *             "colocate_with": [],
                     *             "cluster_id": "clstr_abc456",
                     *             "state": "Active"
                     *           }
                     *         }
                     *       ],
                     *       "has_more": false
                     *     } */
                    "application/json": components["schemas"]["market-api_ListClustersResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    listContracts: {
        parameters: {
            query?: {
                /**
                 * @description Filter by instance type
                 * @example h100i
                 */
                instance_type?: components["schemas"]["market-api_Ticker"];
                /**
                 * @description Start of interval to find active contracts. Must be used with active_within_interval_end
                 * @example 2024-01-01T00:00:00Z
                 */
                active_within_interval_start?: components["schemas"]["market-api_ISO8601DateTime"];
                /**
                 * @description End of interval to find active contracts. Must be used with active_within_interval_start
                 * @example 2024-01-02T00:00:00Z
                 */
                active_within_interval_end?: components["schemas"]["market-api_ISO8601DateTime"];
                /**
                 * @description Filter by contract state. Options: "All", "Upcoming", "Active", "Expired". Default excludes expired contracts
                 * @example Active
                 */
                state?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of contracts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "list",
                     *       "data": [
                     *         {
                     *           "object": "contract",
                     *           "status": "active",
                     *           "id": "cont_xyz789",
                     *           "created_at": "2024-07-15T22:30:17.426Z",
                     *           "instance_type": "h100i",
                     *           "shape": {
                     *             "intervals": [
                     *               "2024-07-16T00:00:00Z",
                     *               "2024-07-17T00:00:00Z"
                     *             ],
                     *             "quantities": [
                     *               10,
                     *               0
                     *             ]
                     *           },
                     *           "state": "Active"
                     *         }
                     *       ],
                     *       "has_more": false
                     *     } */
                    "application/json": components["schemas"]["market-api_ListContractsResponse"];
                };
            };
            /** @description Bad request - invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "must provide both active_within_interval_start and active_within_interval_end or none of them"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    getContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Contract ID
                 * @example cont_xyz789
                 */
                id: components["schemas"]["market-api_ContractId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contract details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "contract",
                     *       "status": "active",
                     *       "id": "cont_xyz789",
                     *       "created_at": "2024-07-15T22:30:17.426Z",
                     *       "instance_type": "h100i",
                     *       "shape": {
                     *         "intervals": [
                     *           "2024-07-16T22:30:16Z",
                     *           "2024-07-17T22:30:16Z",
                     *           "2024-07-18T22:30:16Z"
                     *         ],
                     *         "quantities": [
                     *           10,
                     *           20,
                     *           0
                     *         ]
                     *       },
                     *       "colocate_with": [
                     *         "cont_abc456"
                     *       ],
                     *       "cluster_id": "clus_xyz123",
                     *       "state": "Active"
                     *     } */
                    "application/json": components["schemas"]["market-api_ContractResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Contract not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "Contract not found"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    listOrders: {
        parameters: {
            query?: {
                /** @description Filter by order side (buy or sell) */
                side?: components["schemas"]["market-api_OrderSide"];
                /** @description Filter by instance type */
                instance_type?: components["schemas"]["market-api_Ticker"];
                /** @description Minimum price in cents */
                min_price?: number;
                /** @description Maximum price in cents */
                max_price?: number;
                /** @description Minimum start date */
                min_start_date?: components["schemas"]["market-api_ISO8601DateTime"];
                /** @description Maximum start date */
                max_start_date?: components["schemas"]["market-api_ISO8601DateTime"];
                /** @description Minimum duration in seconds */
                min_duration?: components["schemas"]["market-api_UnixEpoch"];
                /** @description Maximum duration in seconds */
                max_duration?: components["schemas"]["market-api_UnixEpoch"];
                /** @description Minimum quantity */
                min_quantity?: number;
                /** @description Maximum quantity */
                max_quantity?: number;
                /** @description Filter by contract ID */
                contract_id?: components["schemas"]["market-api_ContractId"];
                /** @description Show only open orders */
                only_open?: boolean;
                /** @description Exclude filled orders */
                exclude_filled?: boolean;
                /** @description Show only filled orders */
                only_filled?: boolean;
                /** @description Minimum filled at date */
                min_filled_at?: components["schemas"]["market-api_ISO8601DateTime"];
                /** @description Maximum filled at date */
                max_filled_at?: components["schemas"]["market-api_ISO8601DateTime"];
                /** @description Minimum fill price in cents */
                min_fill_price?: number;
                /** @description Maximum fill price in cents */
                max_fill_price?: number;
                /** @description Exclude cancelled orders */
                exclude_cancelled?: boolean;
                /** @description Show only cancelled orders */
                only_cancelled?: boolean;
                /** @description Minimum cancelled at date */
                min_cancelled_at?: components["schemas"]["market-api_ISO8601DateTime"];
                /** @description Maximum cancelled at date */
                max_cancelled_at?: components["schemas"]["market-api_ISO8601DateTime"];
                /** @description Minimum placed at date */
                min_placed_at?: components["schemas"]["market-api_ISO8601DateTime"];
                /** @description Maximum placed at date */
                max_placed_at?: components["schemas"]["market-api_ISO8601DateTime"];
                /** @description Maximum number of results to return (default: 100, max: 100) */
                limit?: number;
                /** @description Number of results to skip */
                offset?: number;
                /** @description Sort field */
                sort_by?: components["schemas"]["market-api_SortBy"];
                /** @description Sort direction */
                sort_direction?: components["schemas"]["market-api_SortDirection"];
                include_public?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "list",
                     *       "data": [
                     *         {
                     *           "object": "order",
                     *           "id": "ordr_xyz123",
                     *           "side": "buy",
                     *           "instance_type": "h100i",
                     *           "price": 5000,
                     *           "quantity": 2,
                     *           "status": "open",
                     *           "created_at": "2024-07-15T22:30:17.426Z",
                     *           "start_at": "2024-07-16T00:00:00Z",
                     *           "end_at": "2024-07-17T00:00:00Z",
                     *           "flags": {
                     *             "ioc": false,
                     *             "post_only": false,
                     *             "market": false,
                     *             "prorate": false
                     *           }
                     *         }
                     *       ],
                     *       "has_more": false
                     *     } */
                    "application/json": components["schemas"]["market-api_ListOrdersResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "Cannot specify both 'only_filled' and 'only_cancelled'"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: {
                /** @description Optional key to ensure idempotent order creation */
                "Idempotency-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["market-api_CreateOrderRequest"];
            };
        };
        responses: {
            /** @description Order created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "order",
                     *       "status": "pending",
                     *       "id": "order_xyz789",
                     *       "idempotency_key": "key_123"
                     *     } */
                    "application/json": components["schemas"]["market-api_CreateOrderResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "invalid_request_error",
                     *       "message": "Start time must be within +/- 1 minute of now, on a future hour, or the string literal 'NOW'",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "authentication_error",
                     *       "message": "missing authentication token",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen, insufficient credits, unauthorized seller, or trading halted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "forbidden",
                     *       "message": "Account is frozen",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Not found - contract or cluster not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "not_found",
                     *       "message": "Contract not found",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Upgrade required - legacy account needs migration */
            426: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "invalid_request_error",
                     *       "message": "Legacy account must be upgraded before placing orders",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "api_error",
                     *       "message": "An internal server error occurred",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    getOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Order ID
                 * @example order_xyz789
                 */
                id: components["schemas"]["market-api_OrderId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "order",
                     *       "id": "order_xyz789",
                     *       "side": "buy",
                     *       "status": "open",
                     *       "instance_type": "h100i",
                     *       "quantity": 4,
                     *       "start_at": "2021-01-01T00:00:00Z",
                     *       "end_at": "2021-01-01T01:00:00Z",
                     *       "price": 2850000,
                     *       "flags": {
                     *         "market": false,
                     *         "post_only": false,
                     *         "ioc": false
                     *       },
                     *       "executed": false,
                     *       "cancelled": false,
                     *       "colocate_with": [],
                     *       "created_at": "2021-01-01T00:00:00Z",
                     *       "rejected": false
                     *     } */
                    "application/json": components["schemas"]["market-api_OrderResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "authentication_error",
                     *       "message": "missing authentication token",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - user not authorized to view this order */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "forbidden",
                     *       "message": "User not authorized to view this order",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "not_found",
                     *       "message": "Order not found",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "api_error",
                     *       "message": "An internal server error occurred",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    cancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Order ID
                 * @example ordr_xyz789
                 */
                id: components["schemas"]["market-api_OrderId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "pending"
                     *     } */
                    "application/json": components["schemas"]["market-api_CancelOrderResponse"];
                };
            };
            /** @description Order already cancelled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "validation_error",
                     *       "message": "Order already cancelled",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "not_found",
                     *       "message": "Order not found",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "type": "api_error",
                     *       "message": "An internal server error occurred",
                     *       "details": []
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    getOrderClusters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Order ID
                 * @example ordr_W9TRG
                 */
                id: components["schemas"]["market-api_OrderId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of clusters associated with the order */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "list",
                     *       "data": [
                     *         {
                     *           "object": "kubernetes_cluster",
                     *           "name": "starlight",
                     *           "kubernetes_namespace": "sf-user123",
                     *           "kubernetes_api_url": "https://starlight.sf-k8s.com",
                     *           "kubernetes_ca_cert": "-----BEGIN CERTIFICATE-----...",
                     *           "contract": {
                     *             "object": "contract",
                     *             "status": "active",
                     *             "id": "cont_xyz123",
                     *             "created_at": "2024-07-15T22:30:17.426Z",
                     *             "instance_type": "h100i",
                     *             "shape": {
                     *               "intervals": [
                     *                 "2024-07-16T00:00:00Z",
                     *                 "2024-07-17T00:00:00Z"
                     *               ],
                     *               "quantities": [
                     *                 4,
                     *                 0
                     *               ]
                     *             },
                     *             "colocate_with": [],
                     *             "cluster_id": "clstr_abc456",
                     *             "state": "Active"
                     *           }
                     *         }
                     *       ],
                     *       "has_more": false
                     *     } */
                    "application/json": components["schemas"]["market-api_ListClustersResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "Order not found"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    listProcurements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of procurements */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "list",
                     *       "data": [
                     *         {
                     *           "object": "procurement",
                     *           "id": "proc_test123",
                     *           "status": "active",
                     *           "instance_type": "h100i",
                     *           "desired_quantity": 5,
                     *           "buy_limit_price_per_gpu_hour": 250,
                     *           "sell_limit_price_per_gpu_hour": 25,
                     *           "horizon": 60,
                     *           "colocation_strategy": "colocate_pinned",
                     *           "actual_quantity": 5,
                     *           "active_order_count": 2,
                     *           "last_message": "Running"
                     *         }
                     *       ],
                     *       "has_more": false
                     *     } */
                    "application/json": components["schemas"]["market-api_ListProcurementsResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    createProcurement: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["market-api_CreateProcurementRequest"];
            };
        };
        responses: {
            /** @description Successfully created procurement */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "procurement",
                     *       "id": "proc_xyz123",
                     *       "status": "active",
                     *       "instance_type": "h100i",
                     *       "desired_quantity": 5,
                     *       "buy_limit_price_per_gpu_hour": 250,
                     *       "sell_limit_price_per_gpu_hour": 25,
                     *       "horizon": 60,
                     *       "colocation_strategy": "colocate_pinned",
                     *       "actual_quantity": 0,
                     *       "active_order_count": 0
                     *     } */
                    "application/json": components["schemas"]["market-api_ProcurementResponse"];
                };
            };
            /** @description Bad request - invalid field values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "desired_quantity must be non-negative"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Payment required - insufficient funds */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "payment_required",
                     *         "message": "insufficient funds"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Not found - cluster not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "cluster starlight not found"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    getProcurement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Procurement ID
                 * @example proc_xyz123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Procurement details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "procurement",
                     *       "id": "proc_xyz123",
                     *       "status": "active",
                     *       "instance_type": "h100i",
                     *       "desired_quantity": 5,
                     *       "buy_limit_price_per_gpu_hour": 250,
                     *       "sell_limit_price_per_gpu_hour": 25,
                     *       "horizon": 60,
                     *       "colocation_strategy": "colocate_pinned",
                     *       "actual_quantity": 5,
                     *       "active_order_count": 2,
                     *       "last_message": "Running"
                     *     } */
                    "application/json": components["schemas"]["market-api_ProcurementResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Procurement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "Procurement proc_xyz123 not found"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    updateProcurement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Procurement ID
                 * @example proc_xyz123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["market-api_UpdateProcurementRequest"];
            };
        };
        responses: {
            /** @description Successfully updated procurement */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "procurement",
                     *       "id": "proc_xyz123",
                     *       "status": "disabled",
                     *       "instance_type": "h100i",
                     *       "desired_quantity": 5,
                     *       "buy_limit_price_per_gpu_hour": 400,
                     *       "sell_limit_price_per_gpu_hour": 100,
                     *       "horizon": 120,
                     *       "colocation_strategy": "colocate_pinned",
                     *       "actual_quantity": 3,
                     *       "active_order_count": 1
                     *     } */
                    "application/json": components["schemas"]["market-api_ProcurementResponse"];
                };
            };
            /** @description Bad request - invalid field values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "invalid_request_error",
                     *         "message": "desired_quantity must be non-negative"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Payment required - insufficient funds */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "payment_required",
                     *         "message": "insufficient funds"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Procurement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "procurement proc_xyz123 not found"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    getRefunds: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of refund requests and their statuses for the account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "refunds",
                     *       "refunds": [
                     *         {
                     *           "report_id": 12345,
                     *           "report_start_time": "2024-03-15T00:00:00Z",
                     *           "report_end_time": "2024-03-15T02:00:00Z",
                     *           "report_nodes_affected": 4,
                     *           "report_cluster_id": "cluster_us_west_1",
                     *           "report_memo": "Network connectivity issues in US-West-1",
                     *           "report_created_at": "2024-03-15T00:30:00Z",
                     *           "memo_amount": "500.00",
                     *           "refund_timestamp": "2024-03-16T00:00:00Z",
                     *           "status": "refunded"
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["market-api_AccountRefundsResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "authentication_error",
                     *         "message": "missing authentication token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Forbidden - account frozen */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "forbidden",
                     *         "message": "Account is frozen"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "api_error",
                     *         "message": "An internal server error occurred"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    getAccountMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "gmail-com-name",
                     *       "role": "user",
                     *       "is_frozen": false,
                     *       "kyc": "basic",
                     *       "submitted_waitlist": true,
                     *       "waitlist": false,
                     *       "kycb_form_submitted": false,
                     *       "created_at": "2024-01-15T10:30:00Z"
                     *     } */
                    "application/json": components["schemas"]["market-api_AccountMeResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "not_found",
                     *         "message": "account not found",
                     *         "details": [],
                     *         "request_id": "req_550e8400-e29b-41d4-a716-446655440000"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    getBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved balance */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "balance",
                     *       "available_cents": 150000,
                     *       "current_cents": 180000,
                     *       "current_overage_cents": 150000,
                     *       "current_hold_cents": 180000,
                     *       "created_at": 1640995200,
                     *       "updated_at": 1640995200
                     *     } */
                    "application/json": components["schemas"]["market-api_GetBalanceResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCredits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved credit balance */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "current_balance_cents": 150000,
                     *       "available_credits_cents": 150000,
                     *       "amount_due_next_billing_period_cents": 0
                     *     } */
                    "application/json": components["schemas"]["market-api_GetCreditsResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    migrateAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Migration request specifying the desired migration method */
        requestBody: {
            content: {
                "application/json": components["schemas"]["market-api_MigrateAccountRequest"];
            };
        };
        responses: {
            /** @description Account successfully migrated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "migrated"
                     *     } */
                    "application/json": components["schemas"]["market-api_MigrateAccountResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account already migrated */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "account_already_migrated",
                     *         "message": "Account has already been migrated",
                     *         "details": [],
                     *         "request_id": "req_550e8400-e29b-41d4-a716-446655440000"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "type": "internal_server_error",
                     *         "message": "An internal server error occurred",
                     *         "details": [],
                     *         "request_id": "req_550e8400-e29b-41d4-a716-446655440000"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    getTransactions: {
        parameters: {
            query?: {
                /** @description Number of transactions to return (1-100, default 10) */
                limit?: number;
                /**
                 * @description Cursor for forward pagination - returns transactions after this ID (exclusive)
                 * @example tx_1234567890
                 */
                starting_after?: components["schemas"]["market-api_TransactionId"];
                /**
                 * @description Cursor for backward pagination - returns transactions before this ID (exclusive)
                 * @example tx_1234567891
                 */
                ending_before?: components["schemas"]["market-api_TransactionId"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "object": "list",
                     *       "data": [
                     *         {
                     *           "object": "transaction",
                     *           "id": "tx_1234567890",
                     *           "transaction_time": 1640995200,
                     *           "amount_cents": 25000,
                     *           "transaction_details": {
                     *             "type": "credit_grant",
                     *             "object": "transaction_details",
                     *             "memo": "Promotional credit"
                     *           }
                     *         }
                     *       ],
                     *       "has_more": false
                     *     } */
                    "application/json": components["schemas"]["market-api_ListTransactionsResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Unauthorized - missing or invalid authentication token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["market-api_SerdeErrorProxy"];
                };
            };
        };
    };
    list_batches: {
        parameters: {
            query: {
                /** @description Max items to return */
                limit: number;
                /** @description Pagination offset */
                after: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of batches */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_Batch"][];
                };
            };
        };
    };
    create_batches: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["large_scale_inference_BatchRequest"];
            };
        };
        responses: {
            /** @description Batches created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_Batch"][];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_SerdeErrorProxy"];
                };
            };
        };
    };
    get_batch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch identifier */
                batch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_Batch"];
                };
            };
            /** @description Batch not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_SerdeErrorProxy"];
                };
            };
        };
    };
    cancel_batch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch identifier */
                batch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch cancelled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_Batch"];
                };
            };
            /** @description Batch not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_SerdeErrorProxy"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_SerdeErrorProxy"];
                };
            };
        };
    };
    health_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_models: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List available models */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["large_scale_inference_Model"][];
                };
            };
        };
    };
    get_model_history: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Model identifier */
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Not implemented */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handle_quote: {
        parameters: {
            query: {
                /** @description Order side: buy or sell */
                side: string;
                /** @description Number of nodes (1-1024) */
                quantity: number;
                /** @description Instance type for buy orders (h100i, h100v, h200ki) */
                instance_type?: string;
                /** @description Contract ID for sell orders */
                contract_id?: string;
                /** @description Cluster constraint (hostname) */
                cluster?: string;
                /** @description Contract ID to colocate with */
                colocate_with?: string;
                /** @description Exact duration in seconds (mutually exclusive with min/max, minimum 3600) */
                duration?: number;
                /** @description Min duration in seconds (minimum 3600, requires max_duration) */
                min_duration?: number;
                /** @description Max duration in seconds (requires min_duration) */
                max_duration?: number;
                /** @description Min start date: 'NOW' or ISO8601 */
                min_start_date?: string;
                /** @description Max start date: 'NOW' or ISO8601 */
                max_start_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Quote retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quoter_ApiQuoteResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quoter_ErrorType"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["quoter_ErrorType"];
                };
            };
        };
    };
}
