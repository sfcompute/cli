/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v0/prices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0Prices"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/quote": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0Quote"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0Orders"];
    put?: never;
    post: operations["postV0Orders"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/orders/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0OrdersById"];
    put?: never;
    post?: never;
    delete: operations["deleteV0OrdersById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/instances": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0Instances"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/instances/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0InstancesById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/credentials": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0Credentials"];
    put?: never;
    post: operations["postV0Credentials"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/contracts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0Contracts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/contracts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0ContractsById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/balance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0Balance"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/procurements": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0Procurements"];
    put?: never;
    post: operations["postV0Procurements"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v0/procurements/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getV0ProcurementsById"];
    put: operations["putV0ProcurementsById"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getV0Prices: {
    parameters: {
      query: {
        /** @description The instance type. */
        instance_type: string;
        /** @description The minimum quantity of nodes filled blocks included in the price calculation contain. */
        min_quantity?: number;
        /** @description The maximum quantity of nodes filled blocks included in the price calculation contain. */
        max_quantity?: number;
        /** @description The minimum duration, in seconds, of filled blocks. */
        min_duration?: number;
        /** @description The maximum duration, in seconds, of filled blocks. */
        max_duration?: number;
        /** @description The number of days to go back, starting from today. If you provide 0, you will only see prices for today. If you provide 1, you will see prices over all of yesterday, and today. */
        since_n_days_ago?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /** @constant */
              object: "price-history-item";
              gpu_hour?: {
                /** @description The minimum price per GPU hour for the period (in centicents, 1/100th of a cent). */
                min: number;
                /** @description The maximum price per GPU hour for the period (in centicents, 1/100th of a cent). */
                max: number;
                /** @description The average price per GPU hour for the period (in centicents, 1/100th of a cent). */
                avg: number;
              };
              /** @description ISO 8601 datetime marking the start of the period. */
              period_start: string;
              /** @description ISO 8601 datetime marking the end of the period. */
              period_end: string;
              /** @description Whether there was no price data for this period. */
              no_data: boolean;
            }[];
            /** @constant */
            object: "list";
          };
          "multipart/form-data": {
            data: {
              /** @constant */
              object: "price-history-item";
              gpu_hour?: {
                /** @description The minimum price per GPU hour for the period (in centicents, 1/100th of a cent). */
                min: number;
                /** @description The maximum price per GPU hour for the period (in centicents, 1/100th of a cent). */
                max: number;
                /** @description The average price per GPU hour for the period (in centicents, 1/100th of a cent). */
                avg: number;
              };
              /** @description ISO 8601 datetime marking the start of the period. */
              period_start: string;
              /** @description ISO 8601 datetime marking the end of the period. */
              period_end: string;
              /** @description Whether there was no price data for this period. */
              no_data: boolean;
            }[];
            /** @constant */
            object: "list";
          };
          "text/plain": {
            data: {
              /** @constant */
              object: "price-history-item";
              gpu_hour?: {
                /** @description The minimum price per GPU hour for the period (in centicents, 1/100th of a cent). */
                min: number;
                /** @description The maximum price per GPU hour for the period (in centicents, 1/100th of a cent). */
                max: number;
                /** @description The average price per GPU hour for the period (in centicents, 1/100th of a cent). */
                avg: number;
              };
              /** @description ISO 8601 datetime marking the start of the period. */
              period_start: string;
              /** @description ISO 8601 datetime marking the end of the period. */
              period_end: string;
              /** @description Whether there was no price data for this period. */
              no_data: boolean;
            }[];
            /** @constant */
            object: "list";
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0Quote: {
    parameters: {
      query: {
        side: "buy" | "sell";
        /** @description Inclusive lower bound for the start time, as an ISO 8601 string. The query will consider all valid start times at or after this time. The difference between this and `max_start_time` can be at most 24 hours. */
        min_start_date: string;
        /** @description Inclusive upper bound for the start time, as an ISO 8601 string. The query will consider all valid start times on or before this time. The difference between this and `min_start_time` can be at most 24 hours. */
        max_start_date: string;
        /** @description The duration, in seconds. Duration will be rounded such that the contract ends on the hour. For example if `start_time` is 17:10 and you put in 30m, the duration will be rounded up to 50m. Similarly, if `start_time` is 18:00 and you put 50m, the duration will be rounded up to 1h. */
        duration: number;
        /** @description The number of nodes. */
        quantity: number;
        /** @description The instance type. */
        instance_type?: string;
        contract_id?: string;
      };
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | {
                /** @constant */
                object: "quote";
                /** @constant */
                side: "buy";
                quote: {
                  /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
                  price: number;
                  /** @description The number of nodes. */
                  quantity: number;
                  /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
                  start_at: string;
                  /** @description The duration, in seconds. Duration will be rounded such that the contract ends on the hour. For example if `start_time` is 17:10 and you put in 30m, the duration will be rounded up to 50m. Similarly, if `start_time` is 18:00 and you put 50m, the duration will be rounded up to 1h. */
                  duration: number;
                  /** @description The instance type. */
                  instance_type: string;
                } | null;
              }
            | {
                /** @constant */
                object: "quote";
                /** @constant */
                side: "sell";
                quote: {
                  /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
                  price: number;
                  /** @description The number of nodes. */
                  quantity: number;
                  /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
                  start_at: string;
                  /** @description The duration, in seconds. Duration will be rounded such that the contract ends on the hour. For example if `start_time` is 17:10 and you put in 30m, the duration will be rounded up to 50m. Similarly, if `start_time` is 18:00 and you put 50m, the duration will be rounded up to 1h. */
                  duration: number;
                  contract_id: string;
                } | null;
              };
          "multipart/form-data":
            | {
                /** @constant */
                object: "quote";
                /** @constant */
                side: "buy";
                quote: {
                  /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
                  price: number;
                  /** @description The number of nodes. */
                  quantity: number;
                  /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
                  start_at: string;
                  /** @description The duration, in seconds. Duration will be rounded such that the contract ends on the hour. For example if `start_time` is 17:10 and you put in 30m, the duration will be rounded up to 50m. Similarly, if `start_time` is 18:00 and you put 50m, the duration will be rounded up to 1h. */
                  duration: number;
                  /** @description The instance type. */
                  instance_type: string;
                } | null;
              }
            | {
                /** @constant */
                object: "quote";
                /** @constant */
                side: "sell";
                quote: {
                  /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
                  price: number;
                  /** @description The number of nodes. */
                  quantity: number;
                  /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
                  start_at: string;
                  /** @description The duration, in seconds. Duration will be rounded such that the contract ends on the hour. For example if `start_time` is 17:10 and you put in 30m, the duration will be rounded up to 50m. Similarly, if `start_time` is 18:00 and you put 50m, the duration will be rounded up to 1h. */
                  duration: number;
                  contract_id: string;
                } | null;
              };
          "text/plain":
            | {
                /** @constant */
                object: "quote";
                /** @constant */
                side: "buy";
                quote: {
                  /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
                  price: number;
                  /** @description The number of nodes. */
                  quantity: number;
                  /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
                  start_at: string;
                  /** @description The duration, in seconds. Duration will be rounded such that the contract ends on the hour. For example if `start_time` is 17:10 and you put in 30m, the duration will be rounded up to 50m. Similarly, if `start_time` is 18:00 and you put 50m, the duration will be rounded up to 1h. */
                  duration: number;
                  /** @description The instance type. */
                  instance_type: string;
                } | null;
              }
            | {
                /** @constant */
                object: "quote";
                /** @constant */
                side: "sell";
                quote: {
                  /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
                  price: number;
                  /** @description The number of nodes. */
                  quantity: number;
                  /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
                  start_at: string;
                  /** @description The duration, in seconds. Duration will be rounded such that the contract ends on the hour. For example if `start_time` is 17:10 and you put in 30m, the duration will be rounded up to 50m. Similarly, if `start_time` is 18:00 and you put 50m, the duration will be rounded up to 1h. */
                  duration: number;
                  contract_id: string;
                } | null;
              };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0Orders: {
    parameters: {
      query?: {
        instance_type?: string;
        limit?: string;
        offset?: string;
        min_start_date?: string;
        max_start_date?: string;
        min_duration?: string;
        max_duration?: string;
        min_quantity?: string;
        max_quantity?: string;
        side?: string;
        include_public?: boolean;
      };
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postV0Orders: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json":
          | {
              /** @constant */
              side: "buy";
              /** @description The instance type. */
              instance_type: string;
              /** @description The number of nodes. */
              quantity: number;
              /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
              start_at: string;
              /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
              end_at: string;
              /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
              price: number;
              flags?: {
                /** @description If true, this will be a market order. */
                market?: boolean;
                /** @description If true, this is a post-only order. */
                post_only?: boolean;
                /** @description If true, this is an immediate-or-cancel order. */
                ioc?: boolean;
              };
              colocate_with?: string[];
            }
          | {
              /** @constant */
              side: "sell";
              contract_id: string;
              /** @description The number of nodes. */
              quantity: number;
              /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
              start_at: string;
              /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
              end_at: string;
              /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
              price: number;
              flags?: {
                /** @description If true, this will be a market order. */
                market?: boolean;
                /** @description If true, this is a post-only order. */
                post_only?: boolean;
                /** @description If true, this is an immediate-or-cancel order. */
                ioc?: boolean;
              };
            };
        "multipart/form-data":
          | {
              /** @constant */
              side: "buy";
              /** @description The instance type. */
              instance_type: string;
              /** @description The number of nodes. */
              quantity: number;
              /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
              start_at: string;
              /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
              end_at: string;
              /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
              price: number;
              flags?: {
                /** @description If true, this will be a market order. */
                market?: boolean;
                /** @description If true, this is a post-only order. */
                post_only?: boolean;
                /** @description If true, this is an immediate-or-cancel order. */
                ioc?: boolean;
              };
              colocate_with?: string[];
            }
          | {
              /** @constant */
              side: "sell";
              contract_id: string;
              /** @description The number of nodes. */
              quantity: number;
              /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
              start_at: string;
              /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
              end_at: string;
              /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
              price: number;
              flags?: {
                /** @description If true, this will be a market order. */
                market?: boolean;
                /** @description If true, this is a post-only order. */
                post_only?: boolean;
                /** @description If true, this is an immediate-or-cancel order. */
                ioc?: boolean;
              };
            };
        "text/plain":
          | {
              /** @constant */
              side: "buy";
              /** @description The instance type. */
              instance_type: string;
              /** @description The number of nodes. */
              quantity: number;
              /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
              start_at: string;
              /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
              end_at: string;
              /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
              price: number;
              flags?: {
                /** @description If true, this will be a market order. */
                market?: boolean;
                /** @description If true, this is a post-only order. */
                post_only?: boolean;
                /** @description If true, this is an immediate-or-cancel order. */
                ioc?: boolean;
              };
              colocate_with?: string[];
            }
          | {
              /** @constant */
              side: "sell";
              contract_id: string;
              /** @description The number of nodes. */
              quantity: number;
              /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
              start_at: string;
              /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
              end_at: string;
              /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
              price: number;
              flags?: {
                /** @description If true, this will be a market order. */
                market?: boolean;
                /** @description If true, this is a post-only order. */
                post_only?: boolean;
                /** @description If true, this is an immediate-or-cancel order. */
                ioc?: boolean;
              };
            };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "order";
            id: string;
            /** @constant */
            status: "pending";
          };
          "multipart/form-data": {
            /** @constant */
            object: "order";
            id: string;
            /** @constant */
            status: "pending";
          };
          "text/plain": {
            /** @constant */
            object: "order";
            id: string;
            /** @constant */
            status: "pending";
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0OrdersById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "order";
            id: string;
            side: "buy" | "sell";
            status:
              | "pending"
              | "rejected"
              | "open"
              | "cancelled"
              | "filled"
              | "expired";
            /** @description The instance type. */
            instance_type: string;
            /** @description The number of nodes. */
            quantity: number;
            /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
            start_at: string;
            /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
            end_at: string;
            /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
            price: number;
            flags: {
              /** @description If true, this will be a market order. */
              market?: boolean;
              /** @description If true, this is a post-only order. */
              post_only?: boolean;
              /** @description If true, this is an immediate-or-cancel order. */
              ioc?: boolean;
            };
            executed: boolean;
            cancelled: boolean;
            executed_at: string | null;
            execution_price: number | null;
            cancelled_at: string | null;
            colocate_with?: string[];
            created_at: string;
          };
          "multipart/form-data": {
            /** @constant */
            object: "order";
            id: string;
            side: "buy" | "sell";
            status:
              | "pending"
              | "rejected"
              | "open"
              | "cancelled"
              | "filled"
              | "expired";
            /** @description The instance type. */
            instance_type: string;
            /** @description The number of nodes. */
            quantity: number;
            /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
            start_at: string;
            /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
            end_at: string;
            /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
            price: number;
            flags: {
              /** @description If true, this will be a market order. */
              market?: boolean;
              /** @description If true, this is a post-only order. */
              post_only?: boolean;
              /** @description If true, this is an immediate-or-cancel order. */
              ioc?: boolean;
            };
            executed: boolean;
            cancelled: boolean;
            executed_at: string | null;
            execution_price: number | null;
            cancelled_at: string | null;
            colocate_with?: string[];
            created_at: string;
          };
          "text/plain": {
            /** @constant */
            object: "order";
            id: string;
            side: "buy" | "sell";
            status:
              | "pending"
              | "rejected"
              | "open"
              | "cancelled"
              | "filled"
              | "expired";
            /** @description The instance type. */
            instance_type: string;
            /** @description The number of nodes. */
            quantity: number;
            /** @description The start time, as an ISO 8601 string. Start times must be either "right now" or on the hour. Order start times must be in the future, and can be either the next minute from now or on the hour. For example, if it's 16:00, valid start times include 16:01, 17:00, and 18:00, but not 16:30. Dates are always rounded up to the nearest minute. */
            start_at: string;
            /** @description The end time, as an ISO 8601 string. End times must be on the hour, i.e. 16:00, 17:00, 18:00, etc. 17:30, 17:01, etc are not valid end times. Dates are always rounded up to the nearest minute. */
            end_at: string;
            /** @description Price in Centicents (1/100th of a cent, One Centicent  = $0.0001) */
            price: number;
            flags: {
              /** @description If true, this will be a market order. */
              market?: boolean;
              /** @description If true, this is a post-only order. */
              post_only?: boolean;
              /** @description If true, this is an immediate-or-cancel order. */
              ioc?: boolean;
            };
            executed: boolean;
            cancelled: boolean;
            executed_at: string | null;
            execution_price: number | null;
            cancelled_at: string | null;
            colocate_with?: string[];
            created_at: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  deleteV0OrdersById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "pending";
          };
          "multipart/form-data": {
            /** @constant */
            object: "pending";
          };
          "text/plain": {
            /** @constant */
            object: "pending";
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0Instances: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /** @constant */
              object: "instance";
              id: string;
              name: string;
              type: string;
              ip: string;
              status: "healthy" | "starting" | "unreachable" | "unhealthy";
            }[];
            /** @constant */
            object: "list";
          };
          "multipart/form-data": {
            data: {
              /** @constant */
              object: "instance";
              id: string;
              name: string;
              type: string;
              ip: string;
              status: "healthy" | "starting" | "unreachable" | "unhealthy";
            }[];
            /** @constant */
            object: "list";
          };
          "text/plain": {
            data: {
              /** @constant */
              object: "instance";
              id: string;
              name: string;
              type: string;
              ip: string;
              status: "healthy" | "starting" | "unreachable" | "unhealthy";
            }[];
            /** @constant */
            object: "list";
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0InstancesById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "instance";
            id: string;
            name: string;
            type: string;
            ip: string;
            status: "healthy" | "starting" | "unreachable" | "unhealthy";
          };
          "multipart/form-data": {
            /** @constant */
            object: "instance";
            id: string;
            name: string;
            type: string;
            ip: string;
            status: "healthy" | "starting" | "unreachable" | "unhealthy";
          };
          "text/plain": {
            /** @constant */
            object: "instance";
            id: string;
            name: string;
            type: string;
            ip: string;
            status: "healthy" | "starting" | "unreachable" | "unhealthy";
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0Credentials: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /** @constant */
              object: "ssh_credential";
              id: string;
              pubkey: string;
              username: string;
            }[];
            /** @constant */
            object: "list";
          };
          "multipart/form-data": {
            data: {
              /** @constant */
              object: "ssh_credential";
              id: string;
              pubkey: string;
              username: string;
            }[];
            /** @constant */
            object: "list";
          };
          "text/plain": {
            data: {
              /** @constant */
              object: "ssh_credential";
              id: string;
              pubkey: string;
              username: string;
            }[];
            /** @constant */
            object: "list";
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  postV0Credentials: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          pubkey: string;
          username: string;
        };
        "multipart/form-data": {
          pubkey: string;
          username: string;
        };
        "text/plain": {
          pubkey: string;
          username: string;
        };
      };
    };
    responses: {
      /** @description SSH credentials and associated Linux user to be set up on the VM when it spins up. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "ssh_credential";
            id: string;
            pubkey: string;
            username: string;
          };
          "multipart/form-data": {
            /** @constant */
            object: "ssh_credential";
            id: string;
            pubkey: string;
            username: string;
          };
          "text/plain": {
            /** @constant */
            object: "ssh_credential";
            id: string;
            pubkey: string;
            username: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0Contracts: {
    parameters: {
      query?: {
        active_within_interval_start?: string;
        active_within_interval_end?: string;
        instance_type?: string;
      };
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: (
              | {
                  /** @constant */
                  object: "contract";
                  /** @constant */
                  status: "active";
                  id: string;
                  /** Format: date-time */
                  created_at: string;
                  /** @description The instance type. */
                  instance_type: string;
                  /** @description A shape that describes the distribution of the contract's size over time. Must end with a quantity of 0. */
                  shape: {
                    intervals: string[];
                    quantities: number[];
                  };
                  colocate_with?: string[];
                  cluster_id?: string;
                }
              | {
                  /** @constant */
                  object: "contract";
                  /** @constant */
                  status: "pending";
                  id: string;
                }
            )[];
            /** @constant */
            object: "list";
          };
          "multipart/form-data": {
            data: (
              | {
                  /** @constant */
                  object: "contract";
                  /** @constant */
                  status: "active";
                  id: string;
                  /** Format: date-time */
                  created_at: string;
                  /** @description The instance type. */
                  instance_type: string;
                  /** @description A shape that describes the distribution of the contract's size over time. Must end with a quantity of 0. */
                  shape: {
                    intervals: string[];
                    quantities: number[];
                  };
                  colocate_with?: string[];
                  cluster_id?: string;
                }
              | {
                  /** @constant */
                  object: "contract";
                  /** @constant */
                  status: "pending";
                  id: string;
                }
            )[];
            /** @constant */
            object: "list";
          };
          "text/plain": {
            data: (
              | {
                  /** @constant */
                  object: "contract";
                  /** @constant */
                  status: "active";
                  id: string;
                  /** Format: date-time */
                  created_at: string;
                  /** @description The instance type. */
                  instance_type: string;
                  /** @description A shape that describes the distribution of the contract's size over time. Must end with a quantity of 0. */
                  shape: {
                    intervals: string[];
                    quantities: number[];
                  };
                  colocate_with?: string[];
                  cluster_id?: string;
                }
              | {
                  /** @constant */
                  object: "contract";
                  /** @constant */
                  status: "pending";
                  id: string;
                }
            )[];
            /** @constant */
            object: "list";
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0ContractsById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | {
                /** @constant */
                object: "contract";
                /** @constant */
                status: "active";
                id: string;
                /** Format: date-time */
                created_at: string;
                /** @description The instance type. */
                instance_type: string;
                /** @description A shape that describes the distribution of the contract's size over time. Must end with a quantity of 0. */
                shape: {
                  intervals: string[];
                  quantities: number[];
                };
                colocate_with?: string[];
                cluster_id?: string;
              }
            | {
                /** @constant */
                object: "contract";
                /** @constant */
                status: "pending";
                id: string;
              };
          "multipart/form-data":
            | {
                /** @constant */
                object: "contract";
                /** @constant */
                status: "active";
                id: string;
                /** Format: date-time */
                created_at: string;
                /** @description The instance type. */
                instance_type: string;
                /** @description A shape that describes the distribution of the contract's size over time. Must end with a quantity of 0. */
                shape: {
                  intervals: string[];
                  quantities: number[];
                };
                colocate_with?: string[];
                cluster_id?: string;
              }
            | {
                /** @constant */
                object: "contract";
                /** @constant */
                status: "pending";
                id: string;
              };
          "text/plain":
            | {
                /** @constant */
                object: "contract";
                /** @constant */
                status: "active";
                id: string;
                /** Format: date-time */
                created_at: string;
                /** @description The instance type. */
                instance_type: string;
                /** @description A shape that describes the distribution of the contract's size over time. Must end with a quantity of 0. */
                shape: {
                  intervals: string[];
                  quantities: number[];
                };
                colocate_with?: string[];
                cluster_id?: string;
              }
            | {
                /** @constant */
                object: "contract";
                /** @constant */
                status: "pending";
                id: string;
              };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0Balance: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "balance";
            available: {
              /** @description Funds available to spend or withdraw. */
              amount: number;
              /** @constant */
              currency: "usd";
            };
            reserved: {
              /** @description Funds held in reserve for pending withdrawals & open buy orders. */
              amount: number;
              /** @constant */
              currency: "usd";
            };
          };
          "multipart/form-data": {
            /** @constant */
            object: "balance";
            available: {
              /** @description Funds available to spend or withdraw. */
              amount: number;
              /** @constant */
              currency: "usd";
            };
            reserved: {
              /** @description Funds held in reserve for pending withdrawals & open buy orders. */
              amount: number;
              /** @constant */
              currency: "usd";
            };
          };
          "text/plain": {
            /** @constant */
            object: "balance";
            available: {
              /** @description Funds available to spend or withdraw. */
              amount: number;
              /** @constant */
              currency: "usd";
            };
            reserved: {
              /** @description Funds held in reserve for pending withdrawals & open buy orders. */
              amount: number;
              /** @constant */
              currency: "usd";
            };
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "not_authenticated";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0Procurements: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              id: string;
              /** @description The instance group of the procurement */
              instance_group: string;
              /** @description The quantity of the procurement */
              quantity: number;
              /** @description The TOTAL price (in centicents) to buy the duration */
              max_price: number;
              /** @description The block duration of the procurement in hours */
              min_duration_in_hours: number;
              /** @description The instance type. */
              instance_type: string;
            }[];
            /** @constant */
            object: "list";
          };
          "multipart/form-data": {
            data: {
              id: string;
              /** @description The instance group of the procurement */
              instance_group: string;
              /** @description The quantity of the procurement */
              quantity: number;
              /** @description The TOTAL price (in centicents) to buy the duration */
              max_price: number;
              /** @description The block duration of the procurement in hours */
              min_duration_in_hours: number;
              /** @description The instance type. */
              instance_type: string;
            }[];
            /** @constant */
            object: "list";
          };
          "text/plain": {
            data: {
              id: string;
              /** @description The instance group of the procurement */
              instance_group: string;
              /** @description The quantity of the procurement */
              quantity: number;
              /** @description The TOTAL price (in centicents) to buy the duration */
              max_price: number;
              /** @description The block duration of the procurement in hours */
              min_duration_in_hours: number;
              /** @description The instance type. */
              instance_type: string;
            }[];
            /** @constant */
            object: "list";
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  postV0Procurements: {
    parameters: {
      query?: never;
      header?: {
        /** @description Generate a bearer token with `$ sf tokens create`. */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The instance type. */
          instance_type: string;
          quantity: number;
          max_price_per_node_hour: number;
          block_duration_in_hours: number;
        };
        "multipart/form-data": {
          /** @description The instance type. */
          instance_type: string;
          quantity: number;
          max_price_per_node_hour: number;
          block_duration_in_hours: number;
        };
        "text/plain": {
          /** @description The instance type. */
          instance_type: string;
          quantity: number;
          max_price_per_node_hour: number;
          block_duration_in_hours: number;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
          "multipart/form-data": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
          "text/plain": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  getV0ProcurementsById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
          "multipart/form-data": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
          "text/plain": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
  putV0ProcurementsById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          quantity?: number;
          /** @description The TOTAL price (in centicents) to buy the duration */
          max_price?: number;
          /** @description The block duration of the procurement in hours */
          min_duration_in_hours?: number;
        };
        "multipart/form-data": {
          quantity?: number;
          /** @description The TOTAL price (in centicents) to buy the duration */
          max_price?: number;
          /** @description The block duration of the procurement in hours */
          min_duration_in_hours?: number;
        };
        "text/plain": {
          quantity?: number;
          /** @description The TOTAL price (in centicents) to buy the duration */
          max_price?: number;
          /** @description The block duration of the procurement in hours */
          min_duration_in_hours?: number;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
          "multipart/form-data": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
          "text/plain": {
            id: string;
            /** @description The instance group of the procurement */
            instance_group: string;
            /** @description The quantity of the procurement */
            quantity: number;
            /** @description The TOTAL price (in centicents) to buy the duration */
            max_price: number;
            /** @description The block duration of the procurement in hours */
            min_duration_in_hours: number;
            /** @description The instance type. */
            instance_type: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "multipart/form-data": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
          "text/plain": {
            /** @constant */
            object: "error";
            /** @constant */
            code: "internal_server";
            message: string;
            details?: Record<string, never>;
          };
        };
      };
    };
  };
}
